// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MotEph.proto

package org.chinalbs.pb;

public final class MotEph {
  private MotEph() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface StGloBrdEphOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.stationharbor.model.StGloBrdEph)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *卫星类型
     * </pre>
     *
     * <code>optional string strSatSys = 1;</code>
     */
    String getStrSatSys();
    /**
     * <pre>
     *卫星类型
     * </pre>
     *
     * <code>optional string strSatSys = 1;</code>
     */
    com.google.protobuf.ByteString
        getStrSatSysBytes();

    /**
     * <pre>
     *卫星号
     * </pre>
     *
     * <code>optional int32 iGloPrn = 2;</code>
     */
    int getIGloPrn();

    /**
     * <pre>
     * </pre>
     *
     * <code>optional .org.stationharbor.model.StCOMT stToe = 3;</code>
     */
    boolean hasStToe();
    /**
     * <pre>
     * </pre>
     *
     * <code>optional .org.stationharbor.model.StCOMT stToe = 3;</code>
     */
    org.chinalbs.pb.MotCommon.StCOMT getStToe();
    /**
     * <pre>
     * </pre>
     *
     * <code>optional .org.stationharbor.model.StCOMT stToe = 3;</code>
     */
    org.chinalbs.pb.MotCommon.StCOMTOrBuilder getStToeOrBuilder();

    /**
     * <pre>
     *SV clock bias(sec) (-TauN)
     * </pre>
     *
     * <code>optional double dTauN = 4;</code>
     */
    double getDTauN();

    /**
     * <pre>
     *SV relative frequency bias (+GammaN)
     * </pre>
     *
     * <code>optional double dGammaN = 5;</code>
     */
    double getDGammaN();

    /**
     * <pre>
     * KM，读N文件后单位转换为m *&#47;
     * </pre>
     *
     * <code>repeated double dAPos = 6;</code>
     */
    java.util.List<Double> getDAPosList();
    /**
     * <pre>
     * KM，读N文件后单位转换为m *&#47;
     * </pre>
     *
     * <code>repeated double dAPos = 6;</code>
     */
    int getDAPosCount();
    /**
     * <pre>
     * KM，读N文件后单位转换为m *&#47;
     * </pre>
     *
     * <code>repeated double dAPos = 6;</code>
     */
    double getDAPos(int index);

    /**
     * <pre>
     * KM/SEC，读N文件后单位转换为m/s *&#47;
     * </pre>
     *
     * <code>repeated double dAVel = 7;</code>
     */
    java.util.List<Double> getDAVelList();
    /**
     * <pre>
     * KM/SEC，读N文件后单位转换为m/s *&#47;
     * </pre>
     *
     * <code>repeated double dAVel = 7;</code>
     */
    int getDAVelCount();
    /**
     * <pre>
     * KM/SEC，读N文件后单位转换为m/s *&#47;
     * </pre>
     *
     * <code>repeated double dAVel = 7;</code>
     */
    double getDAVel(int index);

    /**
     * <pre>
     *日月慑动加速度 KM/SEC2，，读N文件后单位转换为m/sec2
     * </pre>
     *
     * <code>repeated double dAAcc = 8;</code>
     */
    java.util.List<Double> getDAAccList();
    /**
     * <pre>
     *日月慑动加速度 KM/SEC2，，读N文件后单位转换为m/sec2
     * </pre>
     *
     * <code>repeated double dAAcc = 8;</code>
     */
    int getDAAccCount();
    /**
     * <pre>
     *日月慑动加速度 KM/SEC2，，读N文件后单位转换为m/sec2
     * </pre>
     *
     * <code>repeated double dAAcc = 8;</code>
     */
    double getDAAcc(int index);

    /**
     * <pre>
     * 0 == OK
     * </pre>
     *
     * <code>optional double dHealth = 9;</code>
     */
    double getDHealth();

    /**
     * <pre>
     * frequency number(-7...+13) (-7...+6 ICD 5.1) 
     * </pre>
     *
     * <code>optional int32 iFreqNum = 10;</code>
     */
    int getIFreqNum();

    /**
     * <code>optional int32 tb = 11;</code>
     */
    int getTb();

    /**
     * <code>optional int32 tk_h = 12;</code>
     */
    int getTkH();

    /**
     * <code>optional int32 tk_m = 13;</code>
     */
    int getTkM();

    /**
     * <code>optional int32 tk_s = 14;</code>
     */
    int getTkS();

    /**
     * <code>optional double dAoo = 15;</code>
     */
    double getDAoo();
  }
  /**
   * <pre>
   *Glonass 星历
   * </pre>
   *
   * Protobuf type {@code org.stationharbor.model.StGloBrdEph}
   */
  public  static final class StGloBrdEph extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.stationharbor.model.StGloBrdEph)
      StGloBrdEphOrBuilder {
    // Use StGloBrdEph.newBuilder() to construct.
    private StGloBrdEph(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StGloBrdEph() {
      strSatSys_ = "";
      iGloPrn_ = 0;
      dTauN_ = 0D;
      dGammaN_ = 0D;
      dAPos_ = java.util.Collections.emptyList();
      dAVel_ = java.util.Collections.emptyList();
      dAAcc_ = java.util.Collections.emptyList();
      dHealth_ = 0D;
      iFreqNum_ = 0;
      tb_ = 0;
      tkH_ = 0;
      tkM_ = 0;
      tkS_ = 0;
      dAoo_ = 0D;
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private StGloBrdEph(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              String s = input.readStringRequireUtf8();

              strSatSys_ = s;
              break;
            }
            case 16: {

              iGloPrn_ = input.readInt32();
              break;
            }
            case 26: {
              org.chinalbs.pb.MotCommon.StCOMT.Builder subBuilder = null;
              if (stToe_ != null) {
                subBuilder = stToe_.toBuilder();
              }
              stToe_ = input.readMessage(org.chinalbs.pb.MotCommon.StCOMT.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(stToe_);
                stToe_ = subBuilder.buildPartial();
              }

              break;
            }
            case 33: {

              dTauN_ = input.readDouble();
              break;
            }
            case 41: {

              dGammaN_ = input.readDouble();
              break;
            }
            case 49: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                dAPos_ = new java.util.ArrayList<Double>();
                mutable_bitField0_ |= 0x00000020;
              }
              dAPos_.add(input.readDouble());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                dAPos_ = new java.util.ArrayList<Double>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                dAPos_.add(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 57: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                dAVel_ = new java.util.ArrayList<Double>();
                mutable_bitField0_ |= 0x00000040;
              }
              dAVel_.add(input.readDouble());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                dAVel_ = new java.util.ArrayList<Double>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                dAVel_.add(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 65: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                dAAcc_ = new java.util.ArrayList<Double>();
                mutable_bitField0_ |= 0x00000080;
              }
              dAAcc_.add(input.readDouble());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                dAAcc_ = new java.util.ArrayList<Double>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                dAAcc_.add(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 73: {

              dHealth_ = input.readDouble();
              break;
            }
            case 80: {

              iFreqNum_ = input.readInt32();
              break;
            }
            case 88: {

              tb_ = input.readInt32();
              break;
            }
            case 96: {

              tkH_ = input.readInt32();
              break;
            }
            case 104: {

              tkM_ = input.readInt32();
              break;
            }
            case 112: {

              tkS_ = input.readInt32();
              break;
            }
            case 121: {

              dAoo_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          dAPos_ = java.util.Collections.unmodifiableList(dAPos_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          dAVel_ = java.util.Collections.unmodifiableList(dAVel_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          dAAcc_ = java.util.Collections.unmodifiableList(dAAcc_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.chinalbs.pb.MotEph.internal_static_org_stationharbor_model_StGloBrdEph_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.chinalbs.pb.MotEph.internal_static_org_stationharbor_model_StGloBrdEph_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.chinalbs.pb.MotEph.StGloBrdEph.class, org.chinalbs.pb.MotEph.StGloBrdEph.Builder.class);
    }

    private int bitField0_;
    public static final int STRSATSYS_FIELD_NUMBER = 1;
    private volatile Object strSatSys_;
    /**
     * <pre>
     *卫星类型
     * </pre>
     *
     * <code>optional string strSatSys = 1;</code>
     */
    public String getStrSatSys() {
      Object ref = strSatSys_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        strSatSys_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *卫星类型
     * </pre>
     *
     * <code>optional string strSatSys = 1;</code>
     */
    public com.google.protobuf.ByteString
        getStrSatSysBytes() {
      Object ref = strSatSys_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        strSatSys_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int IGLOPRN_FIELD_NUMBER = 2;
    private int iGloPrn_;
    /**
     * <pre>
     *卫星号
     * </pre>
     *
     * <code>optional int32 iGloPrn = 2;</code>
     */
    public int getIGloPrn() {
      return iGloPrn_;
    }

    public static final int STTOE_FIELD_NUMBER = 3;
    private org.chinalbs.pb.MotCommon.StCOMT stToe_;
    /**
     * <pre>
     * </pre>
     *
     * <code>optional .org.stationharbor.model.StCOMT stToe = 3;</code>
     */
    public boolean hasStToe() {
      return stToe_ != null;
    }
    /**
     * <pre>
     * </pre>
     *
     * <code>optional .org.stationharbor.model.StCOMT stToe = 3;</code>
     */
    public org.chinalbs.pb.MotCommon.StCOMT getStToe() {
      return stToe_ == null ? org.chinalbs.pb.MotCommon.StCOMT.getDefaultInstance() : stToe_;
    }
    /**
     * <pre>
     * </pre>
     *
     * <code>optional .org.stationharbor.model.StCOMT stToe = 3;</code>
     */
    public org.chinalbs.pb.MotCommon.StCOMTOrBuilder getStToeOrBuilder() {
      return getStToe();
    }

    public static final int DTAUN_FIELD_NUMBER = 4;
    private double dTauN_;
    /**
     * <pre>
     *SV clock bias(sec) (-TauN)
     * </pre>
     *
     * <code>optional double dTauN = 4;</code>
     */
    public double getDTauN() {
      return dTauN_;
    }

    public static final int DGAMMAN_FIELD_NUMBER = 5;
    private double dGammaN_;
    /**
     * <pre>
     *SV relative frequency bias (+GammaN)
     * </pre>
     *
     * <code>optional double dGammaN = 5;</code>
     */
    public double getDGammaN() {
      return dGammaN_;
    }

    public static final int DAPOS_FIELD_NUMBER = 6;
    private java.util.List<Double> dAPos_;
    /**
     * <pre>
     * KM，读N文件后单位转换为m *&#47;
     * </pre>
     *
     * <code>repeated double dAPos = 6;</code>
     */
    public java.util.List<Double>
        getDAPosList() {
      return dAPos_;
    }
    /**
     * <pre>
     * KM，读N文件后单位转换为m *&#47;
     * </pre>
     *
     * <code>repeated double dAPos = 6;</code>
     */
    public int getDAPosCount() {
      return dAPos_.size();
    }
    /**
     * <pre>
     * KM，读N文件后单位转换为m *&#47;
     * </pre>
     *
     * <code>repeated double dAPos = 6;</code>
     */
    public double getDAPos(int index) {
      return dAPos_.get(index);
    }
    private int dAPosMemoizedSerializedSize = -1;

    public static final int DAVEL_FIELD_NUMBER = 7;
    private java.util.List<Double> dAVel_;
    /**
     * <pre>
     * KM/SEC，读N文件后单位转换为m/s *&#47;
     * </pre>
     *
     * <code>repeated double dAVel = 7;</code>
     */
    public java.util.List<Double>
        getDAVelList() {
      return dAVel_;
    }
    /**
     * <pre>
     * KM/SEC，读N文件后单位转换为m/s *&#47;
     * </pre>
     *
     * <code>repeated double dAVel = 7;</code>
     */
    public int getDAVelCount() {
      return dAVel_.size();
    }
    /**
     * <pre>
     * KM/SEC，读N文件后单位转换为m/s *&#47;
     * </pre>
     *
     * <code>repeated double dAVel = 7;</code>
     */
    public double getDAVel(int index) {
      return dAVel_.get(index);
    }
    private int dAVelMemoizedSerializedSize = -1;

    public static final int DAACC_FIELD_NUMBER = 8;
    private java.util.List<Double> dAAcc_;
    /**
     * <pre>
     *日月慑动加速度 KM/SEC2，，读N文件后单位转换为m/sec2
     * </pre>
     *
     * <code>repeated double dAAcc = 8;</code>
     */
    public java.util.List<Double>
        getDAAccList() {
      return dAAcc_;
    }
    /**
     * <pre>
     *日月慑动加速度 KM/SEC2，，读N文件后单位转换为m/sec2
     * </pre>
     *
     * <code>repeated double dAAcc = 8;</code>
     */
    public int getDAAccCount() {
      return dAAcc_.size();
    }
    /**
     * <pre>
     *日月慑动加速度 KM/SEC2，，读N文件后单位转换为m/sec2
     * </pre>
     *
     * <code>repeated double dAAcc = 8;</code>
     */
    public double getDAAcc(int index) {
      return dAAcc_.get(index);
    }
    private int dAAccMemoizedSerializedSize = -1;

    public static final int DHEALTH_FIELD_NUMBER = 9;
    private double dHealth_;
    /**
     * <pre>
     * 0 == OK
     * </pre>
     *
     * <code>optional double dHealth = 9;</code>
     */
    public double getDHealth() {
      return dHealth_;
    }

    public static final int IFREQNUM_FIELD_NUMBER = 10;
    private int iFreqNum_;
    /**
     * <pre>
     * frequency number(-7...+13) (-7...+6 ICD 5.1) 
     * </pre>
     *
     * <code>optional int32 iFreqNum = 10;</code>
     */
    public int getIFreqNum() {
      return iFreqNum_;
    }

    public static final int TB_FIELD_NUMBER = 11;
    private int tb_;
    /**
     * <code>optional int32 tb = 11;</code>
     */
    public int getTb() {
      return tb_;
    }

    public static final int TK_H_FIELD_NUMBER = 12;
    private int tkH_;
    /**
     * <code>optional int32 tk_h = 12;</code>
     */
    public int getTkH() {
      return tkH_;
    }

    public static final int TK_M_FIELD_NUMBER = 13;
    private int tkM_;
    /**
     * <code>optional int32 tk_m = 13;</code>
     */
    public int getTkM() {
      return tkM_;
    }

    public static final int TK_S_FIELD_NUMBER = 14;
    private int tkS_;
    /**
     * <code>optional int32 tk_s = 14;</code>
     */
    public int getTkS() {
      return tkS_;
    }

    public static final int DAOO_FIELD_NUMBER = 15;
    private double dAoo_;
    /**
     * <code>optional double dAoo = 15;</code>
     */
    public double getDAoo() {
      return dAoo_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (!getStrSatSysBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, strSatSys_);
      }
      if (iGloPrn_ != 0) {
        output.writeInt32(2, iGloPrn_);
      }
      if (stToe_ != null) {
        output.writeMessage(3, getStToe());
      }
      if (dTauN_ != 0D) {
        output.writeDouble(4, dTauN_);
      }
      if (dGammaN_ != 0D) {
        output.writeDouble(5, dGammaN_);
      }
      if (getDAPosList().size() > 0) {
        output.writeUInt32NoTag(50);
        output.writeUInt32NoTag(dAPosMemoizedSerializedSize);
      }
      for (int i = 0; i < dAPos_.size(); i++) {
        output.writeDoubleNoTag(dAPos_.get(i));
      }
      if (getDAVelList().size() > 0) {
        output.writeUInt32NoTag(58);
        output.writeUInt32NoTag(dAVelMemoizedSerializedSize);
      }
      for (int i = 0; i < dAVel_.size(); i++) {
        output.writeDoubleNoTag(dAVel_.get(i));
      }
      if (getDAAccList().size() > 0) {
        output.writeUInt32NoTag(66);
        output.writeUInt32NoTag(dAAccMemoizedSerializedSize);
      }
      for (int i = 0; i < dAAcc_.size(); i++) {
        output.writeDoubleNoTag(dAAcc_.get(i));
      }
      if (dHealth_ != 0D) {
        output.writeDouble(9, dHealth_);
      }
      if (iFreqNum_ != 0) {
        output.writeInt32(10, iFreqNum_);
      }
      if (tb_ != 0) {
        output.writeInt32(11, tb_);
      }
      if (tkH_ != 0) {
        output.writeInt32(12, tkH_);
      }
      if (tkM_ != 0) {
        output.writeInt32(13, tkM_);
      }
      if (tkS_ != 0) {
        output.writeInt32(14, tkS_);
      }
      if (dAoo_ != 0D) {
        output.writeDouble(15, dAoo_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getStrSatSysBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, strSatSys_);
      }
      if (iGloPrn_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, iGloPrn_);
      }
      if (stToe_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getStToe());
      }
      if (dTauN_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, dTauN_);
      }
      if (dGammaN_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, dGammaN_);
      }
      {
        int dataSize = 0;
        dataSize = 8 * getDAPosList().size();
        size += dataSize;
        if (!getDAPosList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        dAPosMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 8 * getDAVelList().size();
        size += dataSize;
        if (!getDAVelList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        dAVelMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 8 * getDAAccList().size();
        size += dataSize;
        if (!getDAAccList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        dAAccMemoizedSerializedSize = dataSize;
      }
      if (dHealth_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(9, dHealth_);
      }
      if (iFreqNum_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, iFreqNum_);
      }
      if (tb_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, tb_);
      }
      if (tkH_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, tkH_);
      }
      if (tkM_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, tkM_);
      }
      if (tkS_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, tkS_);
      }
      if (dAoo_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(15, dAoo_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.chinalbs.pb.MotEph.StGloBrdEph)) {
        return super.equals(obj);
      }
      org.chinalbs.pb.MotEph.StGloBrdEph other = (org.chinalbs.pb.MotEph.StGloBrdEph) obj;

      boolean result = true;
      result = result && getStrSatSys()
          .equals(other.getStrSatSys());
      result = result && (getIGloPrn()
          == other.getIGloPrn());
      result = result && (hasStToe() == other.hasStToe());
      if (hasStToe()) {
        result = result && getStToe()
            .equals(other.getStToe());
      }
      result = result && (
          Double.doubleToLongBits(getDTauN())
          == Double.doubleToLongBits(
              other.getDTauN()));
      result = result && (
          Double.doubleToLongBits(getDGammaN())
          == Double.doubleToLongBits(
              other.getDGammaN()));
      result = result && getDAPosList()
          .equals(other.getDAPosList());
      result = result && getDAVelList()
          .equals(other.getDAVelList());
      result = result && getDAAccList()
          .equals(other.getDAAccList());
      result = result && (
          Double.doubleToLongBits(getDHealth())
          == Double.doubleToLongBits(
              other.getDHealth()));
      result = result && (getIFreqNum()
          == other.getIFreqNum());
      result = result && (getTb()
          == other.getTb());
      result = result && (getTkH()
          == other.getTkH());
      result = result && (getTkM()
          == other.getTkM());
      result = result && (getTkS()
          == other.getTkS());
      result = result && (
          Double.doubleToLongBits(getDAoo())
          == Double.doubleToLongBits(
              other.getDAoo()));
      return result;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + STRSATSYS_FIELD_NUMBER;
      hash = (53 * hash) + getStrSatSys().hashCode();
      hash = (37 * hash) + IGLOPRN_FIELD_NUMBER;
      hash = (53 * hash) + getIGloPrn();
      if (hasStToe()) {
        hash = (37 * hash) + STTOE_FIELD_NUMBER;
        hash = (53 * hash) + getStToe().hashCode();
      }
      hash = (37 * hash) + DTAUN_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDTauN()));
      hash = (37 * hash) + DGAMMAN_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDGammaN()));
      if (getDAPosCount() > 0) {
        hash = (37 * hash) + DAPOS_FIELD_NUMBER;
        hash = (53 * hash) + getDAPosList().hashCode();
      }
      if (getDAVelCount() > 0) {
        hash = (37 * hash) + DAVEL_FIELD_NUMBER;
        hash = (53 * hash) + getDAVelList().hashCode();
      }
      if (getDAAccCount() > 0) {
        hash = (37 * hash) + DAACC_FIELD_NUMBER;
        hash = (53 * hash) + getDAAccList().hashCode();
      }
      hash = (37 * hash) + DHEALTH_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDHealth()));
      hash = (37 * hash) + IFREQNUM_FIELD_NUMBER;
      hash = (53 * hash) + getIFreqNum();
      hash = (37 * hash) + TB_FIELD_NUMBER;
      hash = (53 * hash) + getTb();
      hash = (37 * hash) + TK_H_FIELD_NUMBER;
      hash = (53 * hash) + getTkH();
      hash = (37 * hash) + TK_M_FIELD_NUMBER;
      hash = (53 * hash) + getTkM();
      hash = (37 * hash) + TK_S_FIELD_NUMBER;
      hash = (53 * hash) + getTkS();
      hash = (37 * hash) + DAOO_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDAoo()));
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.chinalbs.pb.MotEph.StGloBrdEph parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.chinalbs.pb.MotEph.StGloBrdEph parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.chinalbs.pb.MotEph.StGloBrdEph parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.chinalbs.pb.MotEph.StGloBrdEph parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.chinalbs.pb.MotEph.StGloBrdEph parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.chinalbs.pb.MotEph.StGloBrdEph parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.chinalbs.pb.MotEph.StGloBrdEph parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.chinalbs.pb.MotEph.StGloBrdEph parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.chinalbs.pb.MotEph.StGloBrdEph parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.chinalbs.pb.MotEph.StGloBrdEph parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chinalbs.pb.MotEph.StGloBrdEph prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *Glonass 星历
     * </pre>
     *
     * Protobuf type {@code org.stationharbor.model.StGloBrdEph}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.stationharbor.model.StGloBrdEph)
        org.chinalbs.pb.MotEph.StGloBrdEphOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.chinalbs.pb.MotEph.internal_static_org_stationharbor_model_StGloBrdEph_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.chinalbs.pb.MotEph.internal_static_org_stationharbor_model_StGloBrdEph_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.chinalbs.pb.MotEph.StGloBrdEph.class, org.chinalbs.pb.MotEph.StGloBrdEph.Builder.class);
      }

      // Construct using org.chinalbs.pb.MotEph.StGloBrdEph.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        strSatSys_ = "";

        iGloPrn_ = 0;

        if (stToeBuilder_ == null) {
          stToe_ = null;
        } else {
          stToe_ = null;
          stToeBuilder_ = null;
        }
        dTauN_ = 0D;

        dGammaN_ = 0D;

        dAPos_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        dAVel_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        dAAcc_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        dHealth_ = 0D;

        iFreqNum_ = 0;

        tb_ = 0;

        tkH_ = 0;

        tkM_ = 0;

        tkS_ = 0;

        dAoo_ = 0D;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.chinalbs.pb.MotEph.internal_static_org_stationharbor_model_StGloBrdEph_descriptor;
      }

      public org.chinalbs.pb.MotEph.StGloBrdEph getDefaultInstanceForType() {
        return org.chinalbs.pb.MotEph.StGloBrdEph.getDefaultInstance();
      }

      public org.chinalbs.pb.MotEph.StGloBrdEph build() {
        org.chinalbs.pb.MotEph.StGloBrdEph result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.chinalbs.pb.MotEph.StGloBrdEph buildPartial() {
        org.chinalbs.pb.MotEph.StGloBrdEph result = new org.chinalbs.pb.MotEph.StGloBrdEph(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.strSatSys_ = strSatSys_;
        result.iGloPrn_ = iGloPrn_;
        if (stToeBuilder_ == null) {
          result.stToe_ = stToe_;
        } else {
          result.stToe_ = stToeBuilder_.build();
        }
        result.dTauN_ = dTauN_;
        result.dGammaN_ = dGammaN_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          dAPos_ = java.util.Collections.unmodifiableList(dAPos_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.dAPos_ = dAPos_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          dAVel_ = java.util.Collections.unmodifiableList(dAVel_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.dAVel_ = dAVel_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          dAAcc_ = java.util.Collections.unmodifiableList(dAAcc_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.dAAcc_ = dAAcc_;
        result.dHealth_ = dHealth_;
        result.iFreqNum_ = iFreqNum_;
        result.tb_ = tb_;
        result.tkH_ = tkH_;
        result.tkM_ = tkM_;
        result.tkS_ = tkS_;
        result.dAoo_ = dAoo_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.chinalbs.pb.MotEph.StGloBrdEph) {
          return mergeFrom((org.chinalbs.pb.MotEph.StGloBrdEph)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.chinalbs.pb.MotEph.StGloBrdEph other) {
        if (other == org.chinalbs.pb.MotEph.StGloBrdEph.getDefaultInstance()) return this;
        if (!other.getStrSatSys().isEmpty()) {
          strSatSys_ = other.strSatSys_;
          onChanged();
        }
        if (other.getIGloPrn() != 0) {
          setIGloPrn(other.getIGloPrn());
        }
        if (other.hasStToe()) {
          mergeStToe(other.getStToe());
        }
        if (other.getDTauN() != 0D) {
          setDTauN(other.getDTauN());
        }
        if (other.getDGammaN() != 0D) {
          setDGammaN(other.getDGammaN());
        }
        if (!other.dAPos_.isEmpty()) {
          if (dAPos_.isEmpty()) {
            dAPos_ = other.dAPos_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureDAPosIsMutable();
            dAPos_.addAll(other.dAPos_);
          }
          onChanged();
        }
        if (!other.dAVel_.isEmpty()) {
          if (dAVel_.isEmpty()) {
            dAVel_ = other.dAVel_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureDAVelIsMutable();
            dAVel_.addAll(other.dAVel_);
          }
          onChanged();
        }
        if (!other.dAAcc_.isEmpty()) {
          if (dAAcc_.isEmpty()) {
            dAAcc_ = other.dAAcc_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureDAAccIsMutable();
            dAAcc_.addAll(other.dAAcc_);
          }
          onChanged();
        }
        if (other.getDHealth() != 0D) {
          setDHealth(other.getDHealth());
        }
        if (other.getIFreqNum() != 0) {
          setIFreqNum(other.getIFreqNum());
        }
        if (other.getTb() != 0) {
          setTb(other.getTb());
        }
        if (other.getTkH() != 0) {
          setTkH(other.getTkH());
        }
        if (other.getTkM() != 0) {
          setTkM(other.getTkM());
        }
        if (other.getTkS() != 0) {
          setTkS(other.getTkS());
        }
        if (other.getDAoo() != 0D) {
          setDAoo(other.getDAoo());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.chinalbs.pb.MotEph.StGloBrdEph parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.chinalbs.pb.MotEph.StGloBrdEph) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private Object strSatSys_ = "";
      /**
       * <pre>
       *卫星类型
       * </pre>
       *
       * <code>optional string strSatSys = 1;</code>
       */
      public String getStrSatSys() {
        Object ref = strSatSys_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          strSatSys_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       *卫星类型
       * </pre>
       *
       * <code>optional string strSatSys = 1;</code>
       */
      public com.google.protobuf.ByteString
          getStrSatSysBytes() {
        Object ref = strSatSys_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          strSatSys_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *卫星类型
       * </pre>
       *
       * <code>optional string strSatSys = 1;</code>
       */
      public Builder setStrSatSys(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        strSatSys_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *卫星类型
       * </pre>
       *
       * <code>optional string strSatSys = 1;</code>
       */
      public Builder clearStrSatSys() {
        
        strSatSys_ = getDefaultInstance().getStrSatSys();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *卫星类型
       * </pre>
       *
       * <code>optional string strSatSys = 1;</code>
       */
      public Builder setStrSatSysBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        strSatSys_ = value;
        onChanged();
        return this;
      }

      private int iGloPrn_ ;
      /**
       * <pre>
       *卫星号
       * </pre>
       *
       * <code>optional int32 iGloPrn = 2;</code>
       */
      public int getIGloPrn() {
        return iGloPrn_;
      }
      /**
       * <pre>
       *卫星号
       * </pre>
       *
       * <code>optional int32 iGloPrn = 2;</code>
       */
      public Builder setIGloPrn(int value) {
        
        iGloPrn_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *卫星号
       * </pre>
       *
       * <code>optional int32 iGloPrn = 2;</code>
       */
      public Builder clearIGloPrn() {
        
        iGloPrn_ = 0;
        onChanged();
        return this;
      }

      private org.chinalbs.pb.MotCommon.StCOMT stToe_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.chinalbs.pb.MotCommon.StCOMT, org.chinalbs.pb.MotCommon.StCOMT.Builder, org.chinalbs.pb.MotCommon.StCOMTOrBuilder> stToeBuilder_;
      /**
       * <pre>
       * </pre>
       *
       * <code>optional .org.stationharbor.model.StCOMT stToe = 3;</code>
       */
      public boolean hasStToe() {
        return stToeBuilder_ != null || stToe_ != null;
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>optional .org.stationharbor.model.StCOMT stToe = 3;</code>
       */
      public org.chinalbs.pb.MotCommon.StCOMT getStToe() {
        if (stToeBuilder_ == null) {
          return stToe_ == null ? org.chinalbs.pb.MotCommon.StCOMT.getDefaultInstance() : stToe_;
        } else {
          return stToeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>optional .org.stationharbor.model.StCOMT stToe = 3;</code>
       */
      public Builder setStToe(org.chinalbs.pb.MotCommon.StCOMT value) {
        if (stToeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          stToe_ = value;
          onChanged();
        } else {
          stToeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>optional .org.stationharbor.model.StCOMT stToe = 3;</code>
       */
      public Builder setStToe(
          org.chinalbs.pb.MotCommon.StCOMT.Builder builderForValue) {
        if (stToeBuilder_ == null) {
          stToe_ = builderForValue.build();
          onChanged();
        } else {
          stToeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>optional .org.stationharbor.model.StCOMT stToe = 3;</code>
       */
      public Builder mergeStToe(org.chinalbs.pb.MotCommon.StCOMT value) {
        if (stToeBuilder_ == null) {
          if (stToe_ != null) {
            stToe_ =
              org.chinalbs.pb.MotCommon.StCOMT.newBuilder(stToe_).mergeFrom(value).buildPartial();
          } else {
            stToe_ = value;
          }
          onChanged();
        } else {
          stToeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>optional .org.stationharbor.model.StCOMT stToe = 3;</code>
       */
      public Builder clearStToe() {
        if (stToeBuilder_ == null) {
          stToe_ = null;
          onChanged();
        } else {
          stToe_ = null;
          stToeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>optional .org.stationharbor.model.StCOMT stToe = 3;</code>
       */
      public org.chinalbs.pb.MotCommon.StCOMT.Builder getStToeBuilder() {
        
        onChanged();
        return getStToeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>optional .org.stationharbor.model.StCOMT stToe = 3;</code>
       */
      public org.chinalbs.pb.MotCommon.StCOMTOrBuilder getStToeOrBuilder() {
        if (stToeBuilder_ != null) {
          return stToeBuilder_.getMessageOrBuilder();
        } else {
          return stToe_ == null ?
              org.chinalbs.pb.MotCommon.StCOMT.getDefaultInstance() : stToe_;
        }
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>optional .org.stationharbor.model.StCOMT stToe = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.chinalbs.pb.MotCommon.StCOMT, org.chinalbs.pb.MotCommon.StCOMT.Builder, org.chinalbs.pb.MotCommon.StCOMTOrBuilder> 
          getStToeFieldBuilder() {
        if (stToeBuilder_ == null) {
          stToeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.chinalbs.pb.MotCommon.StCOMT, org.chinalbs.pb.MotCommon.StCOMT.Builder, org.chinalbs.pb.MotCommon.StCOMTOrBuilder>(
                  getStToe(),
                  getParentForChildren(),
                  isClean());
          stToe_ = null;
        }
        return stToeBuilder_;
      }

      private double dTauN_ ;
      /**
       * <pre>
       *SV clock bias(sec) (-TauN)
       * </pre>
       *
       * <code>optional double dTauN = 4;</code>
       */
      public double getDTauN() {
        return dTauN_;
      }
      /**
       * <pre>
       *SV clock bias(sec) (-TauN)
       * </pre>
       *
       * <code>optional double dTauN = 4;</code>
       */
      public Builder setDTauN(double value) {
        
        dTauN_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *SV clock bias(sec) (-TauN)
       * </pre>
       *
       * <code>optional double dTauN = 4;</code>
       */
      public Builder clearDTauN() {
        
        dTauN_ = 0D;
        onChanged();
        return this;
      }

      private double dGammaN_ ;
      /**
       * <pre>
       *SV relative frequency bias (+GammaN)
       * </pre>
       *
       * <code>optional double dGammaN = 5;</code>
       */
      public double getDGammaN() {
        return dGammaN_;
      }
      /**
       * <pre>
       *SV relative frequency bias (+GammaN)
       * </pre>
       *
       * <code>optional double dGammaN = 5;</code>
       */
      public Builder setDGammaN(double value) {
        
        dGammaN_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *SV relative frequency bias (+GammaN)
       * </pre>
       *
       * <code>optional double dGammaN = 5;</code>
       */
      public Builder clearDGammaN() {
        
        dGammaN_ = 0D;
        onChanged();
        return this;
      }

      private java.util.List<Double> dAPos_ = java.util.Collections.emptyList();
      private void ensureDAPosIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          dAPos_ = new java.util.ArrayList<Double>(dAPos_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <pre>
       * KM，读N文件后单位转换为m *&#47;
       * </pre>
       *
       * <code>repeated double dAPos = 6;</code>
       */
      public java.util.List<Double>
          getDAPosList() {
        return java.util.Collections.unmodifiableList(dAPos_);
      }
      /**
       * <pre>
       * KM，读N文件后单位转换为m *&#47;
       * </pre>
       *
       * <code>repeated double dAPos = 6;</code>
       */
      public int getDAPosCount() {
        return dAPos_.size();
      }
      /**
       * <pre>
       * KM，读N文件后单位转换为m *&#47;
       * </pre>
       *
       * <code>repeated double dAPos = 6;</code>
       */
      public double getDAPos(int index) {
        return dAPos_.get(index);
      }
      /**
       * <pre>
       * KM，读N文件后单位转换为m *&#47;
       * </pre>
       *
       * <code>repeated double dAPos = 6;</code>
       */
      public Builder setDAPos(
          int index, double value) {
        ensureDAPosIsMutable();
        dAPos_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * KM，读N文件后单位转换为m *&#47;
       * </pre>
       *
       * <code>repeated double dAPos = 6;</code>
       */
      public Builder addDAPos(double value) {
        ensureDAPosIsMutable();
        dAPos_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * KM，读N文件后单位转换为m *&#47;
       * </pre>
       *
       * <code>repeated double dAPos = 6;</code>
       */
      public Builder addAllDAPos(
          Iterable<? extends Double> values) {
        ensureDAPosIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, dAPos_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * KM，读N文件后单位转换为m *&#47;
       * </pre>
       *
       * <code>repeated double dAPos = 6;</code>
       */
      public Builder clearDAPos() {
        dAPos_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      private java.util.List<Double> dAVel_ = java.util.Collections.emptyList();
      private void ensureDAVelIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          dAVel_ = new java.util.ArrayList<Double>(dAVel_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <pre>
       * KM/SEC，读N文件后单位转换为m/s *&#47;
       * </pre>
       *
       * <code>repeated double dAVel = 7;</code>
       */
      public java.util.List<Double>
          getDAVelList() {
        return java.util.Collections.unmodifiableList(dAVel_);
      }
      /**
       * <pre>
       * KM/SEC，读N文件后单位转换为m/s *&#47;
       * </pre>
       *
       * <code>repeated double dAVel = 7;</code>
       */
      public int getDAVelCount() {
        return dAVel_.size();
      }
      /**
       * <pre>
       * KM/SEC，读N文件后单位转换为m/s *&#47;
       * </pre>
       *
       * <code>repeated double dAVel = 7;</code>
       */
      public double getDAVel(int index) {
        return dAVel_.get(index);
      }
      /**
       * <pre>
       * KM/SEC，读N文件后单位转换为m/s *&#47;
       * </pre>
       *
       * <code>repeated double dAVel = 7;</code>
       */
      public Builder setDAVel(
          int index, double value) {
        ensureDAVelIsMutable();
        dAVel_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * KM/SEC，读N文件后单位转换为m/s *&#47;
       * </pre>
       *
       * <code>repeated double dAVel = 7;</code>
       */
      public Builder addDAVel(double value) {
        ensureDAVelIsMutable();
        dAVel_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * KM/SEC，读N文件后单位转换为m/s *&#47;
       * </pre>
       *
       * <code>repeated double dAVel = 7;</code>
       */
      public Builder addAllDAVel(
          Iterable<? extends Double> values) {
        ensureDAVelIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, dAVel_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * KM/SEC，读N文件后单位转换为m/s *&#47;
       * </pre>
       *
       * <code>repeated double dAVel = 7;</code>
       */
      public Builder clearDAVel() {
        dAVel_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      private java.util.List<Double> dAAcc_ = java.util.Collections.emptyList();
      private void ensureDAAccIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          dAAcc_ = new java.util.ArrayList<Double>(dAAcc_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <pre>
       *日月慑动加速度 KM/SEC2，，读N文件后单位转换为m/sec2
       * </pre>
       *
       * <code>repeated double dAAcc = 8;</code>
       */
      public java.util.List<Double>
          getDAAccList() {
        return java.util.Collections.unmodifiableList(dAAcc_);
      }
      /**
       * <pre>
       *日月慑动加速度 KM/SEC2，，读N文件后单位转换为m/sec2
       * </pre>
       *
       * <code>repeated double dAAcc = 8;</code>
       */
      public int getDAAccCount() {
        return dAAcc_.size();
      }
      /**
       * <pre>
       *日月慑动加速度 KM/SEC2，，读N文件后单位转换为m/sec2
       * </pre>
       *
       * <code>repeated double dAAcc = 8;</code>
       */
      public double getDAAcc(int index) {
        return dAAcc_.get(index);
      }
      /**
       * <pre>
       *日月慑动加速度 KM/SEC2，，读N文件后单位转换为m/sec2
       * </pre>
       *
       * <code>repeated double dAAcc = 8;</code>
       */
      public Builder setDAAcc(
          int index, double value) {
        ensureDAAccIsMutable();
        dAAcc_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *日月慑动加速度 KM/SEC2，，读N文件后单位转换为m/sec2
       * </pre>
       *
       * <code>repeated double dAAcc = 8;</code>
       */
      public Builder addDAAcc(double value) {
        ensureDAAccIsMutable();
        dAAcc_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *日月慑动加速度 KM/SEC2，，读N文件后单位转换为m/sec2
       * </pre>
       *
       * <code>repeated double dAAcc = 8;</code>
       */
      public Builder addAllDAAcc(
          Iterable<? extends Double> values) {
        ensureDAAccIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, dAAcc_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *日月慑动加速度 KM/SEC2，，读N文件后单位转换为m/sec2
       * </pre>
       *
       * <code>repeated double dAAcc = 8;</code>
       */
      public Builder clearDAAcc() {
        dAAcc_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      private double dHealth_ ;
      /**
       * <pre>
       * 0 == OK
       * </pre>
       *
       * <code>optional double dHealth = 9;</code>
       */
      public double getDHealth() {
        return dHealth_;
      }
      /**
       * <pre>
       * 0 == OK
       * </pre>
       *
       * <code>optional double dHealth = 9;</code>
       */
      public Builder setDHealth(double value) {
        
        dHealth_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 0 == OK
       * </pre>
       *
       * <code>optional double dHealth = 9;</code>
       */
      public Builder clearDHealth() {
        
        dHealth_ = 0D;
        onChanged();
        return this;
      }

      private int iFreqNum_ ;
      /**
       * <pre>
       * frequency number(-7...+13) (-7...+6 ICD 5.1) 
       * </pre>
       *
       * <code>optional int32 iFreqNum = 10;</code>
       */
      public int getIFreqNum() {
        return iFreqNum_;
      }
      /**
       * <pre>
       * frequency number(-7...+13) (-7...+6 ICD 5.1) 
       * </pre>
       *
       * <code>optional int32 iFreqNum = 10;</code>
       */
      public Builder setIFreqNum(int value) {
        
        iFreqNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * frequency number(-7...+13) (-7...+6 ICD 5.1) 
       * </pre>
       *
       * <code>optional int32 iFreqNum = 10;</code>
       */
      public Builder clearIFreqNum() {
        
        iFreqNum_ = 0;
        onChanged();
        return this;
      }

      private int tb_ ;
      /**
       * <code>optional int32 tb = 11;</code>
       */
      public int getTb() {
        return tb_;
      }
      /**
       * <code>optional int32 tb = 11;</code>
       */
      public Builder setTb(int value) {
        
        tb_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 tb = 11;</code>
       */
      public Builder clearTb() {
        
        tb_ = 0;
        onChanged();
        return this;
      }

      private int tkH_ ;
      /**
       * <code>optional int32 tk_h = 12;</code>
       */
      public int getTkH() {
        return tkH_;
      }
      /**
       * <code>optional int32 tk_h = 12;</code>
       */
      public Builder setTkH(int value) {
        
        tkH_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 tk_h = 12;</code>
       */
      public Builder clearTkH() {
        
        tkH_ = 0;
        onChanged();
        return this;
      }

      private int tkM_ ;
      /**
       * <code>optional int32 tk_m = 13;</code>
       */
      public int getTkM() {
        return tkM_;
      }
      /**
       * <code>optional int32 tk_m = 13;</code>
       */
      public Builder setTkM(int value) {
        
        tkM_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 tk_m = 13;</code>
       */
      public Builder clearTkM() {
        
        tkM_ = 0;
        onChanged();
        return this;
      }

      private int tkS_ ;
      /**
       * <code>optional int32 tk_s = 14;</code>
       */
      public int getTkS() {
        return tkS_;
      }
      /**
       * <code>optional int32 tk_s = 14;</code>
       */
      public Builder setTkS(int value) {
        
        tkS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 tk_s = 14;</code>
       */
      public Builder clearTkS() {
        
        tkS_ = 0;
        onChanged();
        return this;
      }

      private double dAoo_ ;
      /**
       * <code>optional double dAoo = 15;</code>
       */
      public double getDAoo() {
        return dAoo_;
      }
      /**
       * <code>optional double dAoo = 15;</code>
       */
      public Builder setDAoo(double value) {
        
        dAoo_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double dAoo = 15;</code>
       */
      public Builder clearDAoo() {
        
        dAoo_ = 0D;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:org.stationharbor.model.StGloBrdEph)
    }

    // @@protoc_insertion_point(class_scope:org.stationharbor.model.StGloBrdEph)
    private static final org.chinalbs.pb.MotEph.StGloBrdEph DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.chinalbs.pb.MotEph.StGloBrdEph();
    }

    public static org.chinalbs.pb.MotEph.StGloBrdEph getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StGloBrdEph>
        PARSER = new com.google.protobuf.AbstractParser<StGloBrdEph>() {
      public StGloBrdEph parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new StGloBrdEph(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StGloBrdEph> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<StGloBrdEph> getParserForType() {
      return PARSER;
    }

    public org.chinalbs.pb.MotEph.StGloBrdEph getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StBdsBrdEphOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.stationharbor.model.StBdsBrdEph)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *卫星系统
     * </pre>
     *
     * <code>optional string strSatSys = 1;</code>
     */
    String getStrSatSys();
    /**
     * <pre>
     *卫星系统
     * </pre>
     *
     * <code>optional string strSatSys = 1;</code>
     */
    com.google.protobuf.ByteString
        getStrSatSysBytes();

    /**
     * <code>optional int32 iBdsPrn = 2;</code>
     */
    int getIBdsPrn();

    /**
     * <pre>
     *年月日时分秒
     * </pre>
     *
     * <code>optional .org.stationharbor.model.StCOMT stToc = 3;</code>
     */
    boolean hasStToc();
    /**
     * <pre>
     *年月日时分秒
     * </pre>
     *
     * <code>optional .org.stationharbor.model.StCOMT stToc = 3;</code>
     */
    org.chinalbs.pb.MotCommon.StCOMT getStToc();
    /**
     * <pre>
     *年月日时分秒
     * </pre>
     *
     * <code>optional .org.stationharbor.model.StCOMT stToc = 3;</code>
     */
    org.chinalbs.pb.MotCommon.StCOMTOrBuilder getStTocOrBuilder();

    /**
     * <pre>
     *toc（周内秒）
     * </pre>
     *
     * <code>optional .org.stationharbor.model.StBDST stTocBdsT = 4;</code>
     */
    boolean hasStTocBdsT();
    /**
     * <pre>
     *toc（周内秒）
     * </pre>
     *
     * <code>optional .org.stationharbor.model.StBDST stTocBdsT = 4;</code>
     */
    org.chinalbs.pb.MotCommon.StBDST getStTocBdsT();
    /**
     * <pre>
     *toc（周内秒）
     * </pre>
     *
     * <code>optional .org.stationharbor.model.StBDST stTocBdsT = 4;</code>
     */
    org.chinalbs.pb.MotCommon.StBDSTOrBuilder getStTocBdsTOrBuilder();

    /**
     * <code>optional double dClkBias = 5;</code>
     */
    double getDClkBias();

    /**
     * <code>optional double dClkDrift = 6;</code>
     */
    double getDClkDrift();

    /**
     * <code>optional double dClkRate = 7;</code>
     */
    double getDClkRate();

    /**
     * <pre>
     * Orbit1 
     * </pre>
     *
     * <code>optional double dAODE = 8;</code>
     */
    double getDAODE();

    /**
     * <pre>
     * radius correction sine(m) 
     * </pre>
     *
     * <code>optional double dCrs = 9;</code>
     */
    double getDCrs();

    /**
     * <pre>
     * correction to mean motion(radians/sec) 
     * </pre>
     *
     * <code>optional double dDeltaN = 10;</code>
     */
    double getDDeltaN();

    /**
     * <pre>
     * mean anomaly (radians) 
     * </pre>
     *
     * <code>optional double dM0 = 11;</code>
     */
    double getDM0();

    /**
     * <pre>
     * Orbit2 
     * </pre>
     *
     * <code>optional double dCuc = 12;</code>
     */
    double getDCuc();

    /**
     * <pre>
     * eccentricity 
     * </pre>
     *
     * <code>optional double de = 13;</code>
     */
    double getDe();

    /**
     * <pre>
     * correction to argument in latitude sine(radians) 
     * </pre>
     *
     * <code>optional double dCus = 14;</code>
     */
    double getDCus();

    /**
     * <pre>
     * square root if semi-major axis(m^0.5) 
     * </pre>
     *
     * <code>optional double dSqrtA = 15;</code>
     */
    double getDSqrtA();

    /**
     * <pre>
     * Orbit3 
     * </pre>
     *
     * <code>optional double dToe = 16;</code>
     */
    double getDToe();

    /**
     * <pre>
     * correction to inclination,cosine(radians) 
     * </pre>
     *
     * <code>optional double dCic = 17;</code>
     */
    double getDCic();

    /**
     * <pre>
     * langitude of theasecending node (radians) Capital omega 
     * </pre>
     *
     * <code>optional double dOmega = 18;</code>
     */
    double getDOmega();

    /**
     * <pre>
     * corrction to inclination,sine(radians) 
     * </pre>
     *
     * <code>optional double dCis = 19;</code>
     */
    double getDCis();

    /**
     * <pre>
     * Orbit4 
     * </pre>
     *
     * <code>optional double di0 = 20;</code>
     */
    double getDi0();

    /**
     * <pre>
     * radius correction(m) 
     * </pre>
     *
     * <code>optional double dCrc = 21;</code>
     */
    double getDCrc();

    /**
     * <pre>
     * argument of perigee(radians) lower case omega 
     * </pre>
     *
     * <code>optional double dwe = 22;</code>
     */
    double getDwe();

    /**
     * <pre>
     * time derivative of longitude of the ascending node(radians/sec) 
     * </pre>
     *
     * <code>optional double dDotOmega = 23;</code>
     */
    double getDDotOmega();

    /**
     * <pre>
     * Orbit5 
     * </pre>
     *
     * <code>optional double dIDOT = 24;</code>
     */
    double getDIDOT();

    /**
     * <pre>
     * flags whose meaning is not clear 
     * </pre>
     *
     * <code>optional double dCodesOnL2Channel = 25;</code>
     */
    double getDCodesOnL2Channel();

    /**
     * <pre>
     * GPS week number 
     * </pre>
     *
     * <code>optional double dBdsWeek = 26;</code>
     */
    double getDBdsWeek();

    /**
     * <pre>
     * Flags whose meaning is not clear 
     * </pre>
     *
     * <code>optional double dL2PDataFlag = 27;</code>
     */
    double getDL2PDataFlag();

    /**
     * <pre>
     * Orbit6 
     * </pre>
     *
     * <code>optional double dSVAcc = 28;</code>
     */
    double getDSVAcc();

    /**
     * <pre>
     * satellite health flag 
     * </pre>
     *
     * <code>optional double dSatH1 = 29;</code>
     */
    double getDSatH1();

    /**
     * <pre>
     * Group delay L2 bias (word 7 subframe 1) 
     * </pre>
     *
     * <code>optional double dTGD1 = 30;</code>
     */
    double getDTGD1();

    /**
     * <pre>
     * age of clock parameter upload (sec) 
     * </pre>
     *
     * <code>optional double dTGD2 = 31;</code>
     */
    double getDTGD2();

    /**
     * <code>optional double dAODC = 32;</code>
     */
    double getDAODC();
  }
  /**
   * <pre>
   *北斗星历
   * </pre>
   *
   * Protobuf type {@code org.stationharbor.model.StBdsBrdEph}
   */
  public  static final class StBdsBrdEph extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.stationharbor.model.StBdsBrdEph)
      StBdsBrdEphOrBuilder {
    // Use StBdsBrdEph.newBuilder() to construct.
    private StBdsBrdEph(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StBdsBrdEph() {
      strSatSys_ = "";
      iBdsPrn_ = 0;
      dClkBias_ = 0D;
      dClkDrift_ = 0D;
      dClkRate_ = 0D;
      dAODE_ = 0D;
      dCrs_ = 0D;
      dDeltaN_ = 0D;
      dM0_ = 0D;
      dCuc_ = 0D;
      de_ = 0D;
      dCus_ = 0D;
      dSqrtA_ = 0D;
      dToe_ = 0D;
      dCic_ = 0D;
      dOmega_ = 0D;
      dCis_ = 0D;
      di0_ = 0D;
      dCrc_ = 0D;
      dwe_ = 0D;
      dDotOmega_ = 0D;
      dIDOT_ = 0D;
      dCodesOnL2Channel_ = 0D;
      dBdsWeek_ = 0D;
      dL2PDataFlag_ = 0D;
      dSVAcc_ = 0D;
      dSatH1_ = 0D;
      dTGD1_ = 0D;
      dTGD2_ = 0D;
      dAODC_ = 0D;
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private StBdsBrdEph(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              String s = input.readStringRequireUtf8();

              strSatSys_ = s;
              break;
            }
            case 16: {

              iBdsPrn_ = input.readInt32();
              break;
            }
            case 26: {
              org.chinalbs.pb.MotCommon.StCOMT.Builder subBuilder = null;
              if (stToc_ != null) {
                subBuilder = stToc_.toBuilder();
              }
              stToc_ = input.readMessage(org.chinalbs.pb.MotCommon.StCOMT.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(stToc_);
                stToc_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              org.chinalbs.pb.MotCommon.StBDST.Builder subBuilder = null;
              if (stTocBdsT_ != null) {
                subBuilder = stTocBdsT_.toBuilder();
              }
              stTocBdsT_ = input.readMessage(org.chinalbs.pb.MotCommon.StBDST.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(stTocBdsT_);
                stTocBdsT_ = subBuilder.buildPartial();
              }

              break;
            }
            case 41: {

              dClkBias_ = input.readDouble();
              break;
            }
            case 49: {

              dClkDrift_ = input.readDouble();
              break;
            }
            case 57: {

              dClkRate_ = input.readDouble();
              break;
            }
            case 65: {

              dAODE_ = input.readDouble();
              break;
            }
            case 73: {

              dCrs_ = input.readDouble();
              break;
            }
            case 81: {

              dDeltaN_ = input.readDouble();
              break;
            }
            case 89: {

              dM0_ = input.readDouble();
              break;
            }
            case 97: {

              dCuc_ = input.readDouble();
              break;
            }
            case 105: {

              de_ = input.readDouble();
              break;
            }
            case 113: {

              dCus_ = input.readDouble();
              break;
            }
            case 121: {

              dSqrtA_ = input.readDouble();
              break;
            }
            case 129: {

              dToe_ = input.readDouble();
              break;
            }
            case 137: {

              dCic_ = input.readDouble();
              break;
            }
            case 145: {

              dOmega_ = input.readDouble();
              break;
            }
            case 153: {

              dCis_ = input.readDouble();
              break;
            }
            case 161: {

              di0_ = input.readDouble();
              break;
            }
            case 169: {

              dCrc_ = input.readDouble();
              break;
            }
            case 177: {

              dwe_ = input.readDouble();
              break;
            }
            case 185: {

              dDotOmega_ = input.readDouble();
              break;
            }
            case 193: {

              dIDOT_ = input.readDouble();
              break;
            }
            case 201: {

              dCodesOnL2Channel_ = input.readDouble();
              break;
            }
            case 209: {

              dBdsWeek_ = input.readDouble();
              break;
            }
            case 217: {

              dL2PDataFlag_ = input.readDouble();
              break;
            }
            case 225: {

              dSVAcc_ = input.readDouble();
              break;
            }
            case 233: {

              dSatH1_ = input.readDouble();
              break;
            }
            case 241: {

              dTGD1_ = input.readDouble();
              break;
            }
            case 249: {

              dTGD2_ = input.readDouble();
              break;
            }
            case 257: {

              dAODC_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.chinalbs.pb.MotEph.internal_static_org_stationharbor_model_StBdsBrdEph_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.chinalbs.pb.MotEph.internal_static_org_stationharbor_model_StBdsBrdEph_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.chinalbs.pb.MotEph.StBdsBrdEph.class, org.chinalbs.pb.MotEph.StBdsBrdEph.Builder.class);
    }

    public static final int STRSATSYS_FIELD_NUMBER = 1;
    private volatile Object strSatSys_;
    /**
     * <pre>
     *卫星系统
     * </pre>
     *
     * <code>optional string strSatSys = 1;</code>
     */
    public String getStrSatSys() {
      Object ref = strSatSys_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        strSatSys_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *卫星系统
     * </pre>
     *
     * <code>optional string strSatSys = 1;</code>
     */
    public com.google.protobuf.ByteString
        getStrSatSysBytes() {
      Object ref = strSatSys_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        strSatSys_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int IBDSPRN_FIELD_NUMBER = 2;
    private int iBdsPrn_;
    /**
     * <code>optional int32 iBdsPrn = 2;</code>
     */
    public int getIBdsPrn() {
      return iBdsPrn_;
    }

    public static final int STTOC_FIELD_NUMBER = 3;
    private org.chinalbs.pb.MotCommon.StCOMT stToc_;
    /**
     * <pre>
     *年月日时分秒
     * </pre>
     *
     * <code>optional .org.stationharbor.model.StCOMT stToc = 3;</code>
     */
    public boolean hasStToc() {
      return stToc_ != null;
    }
    /**
     * <pre>
     *年月日时分秒
     * </pre>
     *
     * <code>optional .org.stationharbor.model.StCOMT stToc = 3;</code>
     */
    public org.chinalbs.pb.MotCommon.StCOMT getStToc() {
      return stToc_ == null ? org.chinalbs.pb.MotCommon.StCOMT.getDefaultInstance() : stToc_;
    }
    /**
     * <pre>
     *年月日时分秒
     * </pre>
     *
     * <code>optional .org.stationharbor.model.StCOMT stToc = 3;</code>
     */
    public org.chinalbs.pb.MotCommon.StCOMTOrBuilder getStTocOrBuilder() {
      return getStToc();
    }

    public static final int STTOCBDST_FIELD_NUMBER = 4;
    private org.chinalbs.pb.MotCommon.StBDST stTocBdsT_;
    /**
     * <pre>
     *toc（周内秒）
     * </pre>
     *
     * <code>optional .org.stationharbor.model.StBDST stTocBdsT = 4;</code>
     */
    public boolean hasStTocBdsT() {
      return stTocBdsT_ != null;
    }
    /**
     * <pre>
     *toc（周内秒）
     * </pre>
     *
     * <code>optional .org.stationharbor.model.StBDST stTocBdsT = 4;</code>
     */
    public org.chinalbs.pb.MotCommon.StBDST getStTocBdsT() {
      return stTocBdsT_ == null ? org.chinalbs.pb.MotCommon.StBDST.getDefaultInstance() : stTocBdsT_;
    }
    /**
     * <pre>
     *toc（周内秒）
     * </pre>
     *
     * <code>optional .org.stationharbor.model.StBDST stTocBdsT = 4;</code>
     */
    public org.chinalbs.pb.MotCommon.StBDSTOrBuilder getStTocBdsTOrBuilder() {
      return getStTocBdsT();
    }

    public static final int DCLKBIAS_FIELD_NUMBER = 5;
    private double dClkBias_;
    /**
     * <code>optional double dClkBias = 5;</code>
     */
    public double getDClkBias() {
      return dClkBias_;
    }

    public static final int DCLKDRIFT_FIELD_NUMBER = 6;
    private double dClkDrift_;
    /**
     * <code>optional double dClkDrift = 6;</code>
     */
    public double getDClkDrift() {
      return dClkDrift_;
    }

    public static final int DCLKRATE_FIELD_NUMBER = 7;
    private double dClkRate_;
    /**
     * <code>optional double dClkRate = 7;</code>
     */
    public double getDClkRate() {
      return dClkRate_;
    }

    public static final int DAODE_FIELD_NUMBER = 8;
    private double dAODE_;
    /**
     * <pre>
     * Orbit1 
     * </pre>
     *
     * <code>optional double dAODE = 8;</code>
     */
    public double getDAODE() {
      return dAODE_;
    }

    public static final int DCRS_FIELD_NUMBER = 9;
    private double dCrs_;
    /**
     * <pre>
     * radius correction sine(m) 
     * </pre>
     *
     * <code>optional double dCrs = 9;</code>
     */
    public double getDCrs() {
      return dCrs_;
    }

    public static final int DDELTAN_FIELD_NUMBER = 10;
    private double dDeltaN_;
    /**
     * <pre>
     * correction to mean motion(radians/sec) 
     * </pre>
     *
     * <code>optional double dDeltaN = 10;</code>
     */
    public double getDDeltaN() {
      return dDeltaN_;
    }

    public static final int DM0_FIELD_NUMBER = 11;
    private double dM0_;
    /**
     * <pre>
     * mean anomaly (radians) 
     * </pre>
     *
     * <code>optional double dM0 = 11;</code>
     */
    public double getDM0() {
      return dM0_;
    }

    public static final int DCUC_FIELD_NUMBER = 12;
    private double dCuc_;
    /**
     * <pre>
     * Orbit2 
     * </pre>
     *
     * <code>optional double dCuc = 12;</code>
     */
    public double getDCuc() {
      return dCuc_;
    }

    public static final int DE_FIELD_NUMBER = 13;
    private double de_;
    /**
     * <pre>
     * eccentricity 
     * </pre>
     *
     * <code>optional double de = 13;</code>
     */
    public double getDe() {
      return de_;
    }

    public static final int DCUS_FIELD_NUMBER = 14;
    private double dCus_;
    /**
     * <pre>
     * correction to argument in latitude sine(radians) 
     * </pre>
     *
     * <code>optional double dCus = 14;</code>
     */
    public double getDCus() {
      return dCus_;
    }

    public static final int DSQRTA_FIELD_NUMBER = 15;
    private double dSqrtA_;
    /**
     * <pre>
     * square root if semi-major axis(m^0.5) 
     * </pre>
     *
     * <code>optional double dSqrtA = 15;</code>
     */
    public double getDSqrtA() {
      return dSqrtA_;
    }

    public static final int DTOE_FIELD_NUMBER = 16;
    private double dToe_;
    /**
     * <pre>
     * Orbit3 
     * </pre>
     *
     * <code>optional double dToe = 16;</code>
     */
    public double getDToe() {
      return dToe_;
    }

    public static final int DCIC_FIELD_NUMBER = 17;
    private double dCic_;
    /**
     * <pre>
     * correction to inclination,cosine(radians) 
     * </pre>
     *
     * <code>optional double dCic = 17;</code>
     */
    public double getDCic() {
      return dCic_;
    }

    public static final int DOMEGA_FIELD_NUMBER = 18;
    private double dOmega_;
    /**
     * <pre>
     * langitude of theasecending node (radians) Capital omega 
     * </pre>
     *
     * <code>optional double dOmega = 18;</code>
     */
    public double getDOmega() {
      return dOmega_;
    }

    public static final int DCIS_FIELD_NUMBER = 19;
    private double dCis_;
    /**
     * <pre>
     * corrction to inclination,sine(radians) 
     * </pre>
     *
     * <code>optional double dCis = 19;</code>
     */
    public double getDCis() {
      return dCis_;
    }

    public static final int DI0_FIELD_NUMBER = 20;
    private double di0_;
    /**
     * <pre>
     * Orbit4 
     * </pre>
     *
     * <code>optional double di0 = 20;</code>
     */
    public double getDi0() {
      return di0_;
    }

    public static final int DCRC_FIELD_NUMBER = 21;
    private double dCrc_;
    /**
     * <pre>
     * radius correction(m) 
     * </pre>
     *
     * <code>optional double dCrc = 21;</code>
     */
    public double getDCrc() {
      return dCrc_;
    }

    public static final int DWE_FIELD_NUMBER = 22;
    private double dwe_;
    /**
     * <pre>
     * argument of perigee(radians) lower case omega 
     * </pre>
     *
     * <code>optional double dwe = 22;</code>
     */
    public double getDwe() {
      return dwe_;
    }

    public static final int DDOTOMEGA_FIELD_NUMBER = 23;
    private double dDotOmega_;
    /**
     * <pre>
     * time derivative of longitude of the ascending node(radians/sec) 
     * </pre>
     *
     * <code>optional double dDotOmega = 23;</code>
     */
    public double getDDotOmega() {
      return dDotOmega_;
    }

    public static final int DIDOT_FIELD_NUMBER = 24;
    private double dIDOT_;
    /**
     * <pre>
     * Orbit5 
     * </pre>
     *
     * <code>optional double dIDOT = 24;</code>
     */
    public double getDIDOT() {
      return dIDOT_;
    }

    public static final int DCODESONL2CHANNEL_FIELD_NUMBER = 25;
    private double dCodesOnL2Channel_;
    /**
     * <pre>
     * flags whose meaning is not clear 
     * </pre>
     *
     * <code>optional double dCodesOnL2Channel = 25;</code>
     */
    public double getDCodesOnL2Channel() {
      return dCodesOnL2Channel_;
    }

    public static final int DBDSWEEK_FIELD_NUMBER = 26;
    private double dBdsWeek_;
    /**
     * <pre>
     * GPS week number 
     * </pre>
     *
     * <code>optional double dBdsWeek = 26;</code>
     */
    public double getDBdsWeek() {
      return dBdsWeek_;
    }

    public static final int DL2PDATAFLAG_FIELD_NUMBER = 27;
    private double dL2PDataFlag_;
    /**
     * <pre>
     * Flags whose meaning is not clear 
     * </pre>
     *
     * <code>optional double dL2PDataFlag = 27;</code>
     */
    public double getDL2PDataFlag() {
      return dL2PDataFlag_;
    }

    public static final int DSVACC_FIELD_NUMBER = 28;
    private double dSVAcc_;
    /**
     * <pre>
     * Orbit6 
     * </pre>
     *
     * <code>optional double dSVAcc = 28;</code>
     */
    public double getDSVAcc() {
      return dSVAcc_;
    }

    public static final int DSATH1_FIELD_NUMBER = 29;
    private double dSatH1_;
    /**
     * <pre>
     * satellite health flag 
     * </pre>
     *
     * <code>optional double dSatH1 = 29;</code>
     */
    public double getDSatH1() {
      return dSatH1_;
    }

    public static final int DTGD1_FIELD_NUMBER = 30;
    private double dTGD1_;
    /**
     * <pre>
     * Group delay L2 bias (word 7 subframe 1) 
     * </pre>
     *
     * <code>optional double dTGD1 = 30;</code>
     */
    public double getDTGD1() {
      return dTGD1_;
    }

    public static final int DTGD2_FIELD_NUMBER = 31;
    private double dTGD2_;
    /**
     * <pre>
     * age of clock parameter upload (sec) 
     * </pre>
     *
     * <code>optional double dTGD2 = 31;</code>
     */
    public double getDTGD2() {
      return dTGD2_;
    }

    public static final int DAODC_FIELD_NUMBER = 32;
    private double dAODC_;
    /**
     * <code>optional double dAODC = 32;</code>
     */
    public double getDAODC() {
      return dAODC_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getStrSatSysBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, strSatSys_);
      }
      if (iBdsPrn_ != 0) {
        output.writeInt32(2, iBdsPrn_);
      }
      if (stToc_ != null) {
        output.writeMessage(3, getStToc());
      }
      if (stTocBdsT_ != null) {
        output.writeMessage(4, getStTocBdsT());
      }
      if (dClkBias_ != 0D) {
        output.writeDouble(5, dClkBias_);
      }
      if (dClkDrift_ != 0D) {
        output.writeDouble(6, dClkDrift_);
      }
      if (dClkRate_ != 0D) {
        output.writeDouble(7, dClkRate_);
      }
      if (dAODE_ != 0D) {
        output.writeDouble(8, dAODE_);
      }
      if (dCrs_ != 0D) {
        output.writeDouble(9, dCrs_);
      }
      if (dDeltaN_ != 0D) {
        output.writeDouble(10, dDeltaN_);
      }
      if (dM0_ != 0D) {
        output.writeDouble(11, dM0_);
      }
      if (dCuc_ != 0D) {
        output.writeDouble(12, dCuc_);
      }
      if (de_ != 0D) {
        output.writeDouble(13, de_);
      }
      if (dCus_ != 0D) {
        output.writeDouble(14, dCus_);
      }
      if (dSqrtA_ != 0D) {
        output.writeDouble(15, dSqrtA_);
      }
      if (dToe_ != 0D) {
        output.writeDouble(16, dToe_);
      }
      if (dCic_ != 0D) {
        output.writeDouble(17, dCic_);
      }
      if (dOmega_ != 0D) {
        output.writeDouble(18, dOmega_);
      }
      if (dCis_ != 0D) {
        output.writeDouble(19, dCis_);
      }
      if (di0_ != 0D) {
        output.writeDouble(20, di0_);
      }
      if (dCrc_ != 0D) {
        output.writeDouble(21, dCrc_);
      }
      if (dwe_ != 0D) {
        output.writeDouble(22, dwe_);
      }
      if (dDotOmega_ != 0D) {
        output.writeDouble(23, dDotOmega_);
      }
      if (dIDOT_ != 0D) {
        output.writeDouble(24, dIDOT_);
      }
      if (dCodesOnL2Channel_ != 0D) {
        output.writeDouble(25, dCodesOnL2Channel_);
      }
      if (dBdsWeek_ != 0D) {
        output.writeDouble(26, dBdsWeek_);
      }
      if (dL2PDataFlag_ != 0D) {
        output.writeDouble(27, dL2PDataFlag_);
      }
      if (dSVAcc_ != 0D) {
        output.writeDouble(28, dSVAcc_);
      }
      if (dSatH1_ != 0D) {
        output.writeDouble(29, dSatH1_);
      }
      if (dTGD1_ != 0D) {
        output.writeDouble(30, dTGD1_);
      }
      if (dTGD2_ != 0D) {
        output.writeDouble(31, dTGD2_);
      }
      if (dAODC_ != 0D) {
        output.writeDouble(32, dAODC_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getStrSatSysBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, strSatSys_);
      }
      if (iBdsPrn_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, iBdsPrn_);
      }
      if (stToc_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getStToc());
      }
      if (stTocBdsT_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getStTocBdsT());
      }
      if (dClkBias_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, dClkBias_);
      }
      if (dClkDrift_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, dClkDrift_);
      }
      if (dClkRate_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, dClkRate_);
      }
      if (dAODE_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, dAODE_);
      }
      if (dCrs_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(9, dCrs_);
      }
      if (dDeltaN_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(10, dDeltaN_);
      }
      if (dM0_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(11, dM0_);
      }
      if (dCuc_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(12, dCuc_);
      }
      if (de_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(13, de_);
      }
      if (dCus_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(14, dCus_);
      }
      if (dSqrtA_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(15, dSqrtA_);
      }
      if (dToe_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(16, dToe_);
      }
      if (dCic_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(17, dCic_);
      }
      if (dOmega_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(18, dOmega_);
      }
      if (dCis_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(19, dCis_);
      }
      if (di0_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(20, di0_);
      }
      if (dCrc_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(21, dCrc_);
      }
      if (dwe_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(22, dwe_);
      }
      if (dDotOmega_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(23, dDotOmega_);
      }
      if (dIDOT_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(24, dIDOT_);
      }
      if (dCodesOnL2Channel_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(25, dCodesOnL2Channel_);
      }
      if (dBdsWeek_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(26, dBdsWeek_);
      }
      if (dL2PDataFlag_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(27, dL2PDataFlag_);
      }
      if (dSVAcc_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(28, dSVAcc_);
      }
      if (dSatH1_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(29, dSatH1_);
      }
      if (dTGD1_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(30, dTGD1_);
      }
      if (dTGD2_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(31, dTGD2_);
      }
      if (dAODC_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(32, dAODC_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.chinalbs.pb.MotEph.StBdsBrdEph)) {
        return super.equals(obj);
      }
      org.chinalbs.pb.MotEph.StBdsBrdEph other = (org.chinalbs.pb.MotEph.StBdsBrdEph) obj;

      boolean result = true;
      result = result && getStrSatSys()
          .equals(other.getStrSatSys());
      result = result && (getIBdsPrn()
          == other.getIBdsPrn());
      result = result && (hasStToc() == other.hasStToc());
      if (hasStToc()) {
        result = result && getStToc()
            .equals(other.getStToc());
      }
      result = result && (hasStTocBdsT() == other.hasStTocBdsT());
      if (hasStTocBdsT()) {
        result = result && getStTocBdsT()
            .equals(other.getStTocBdsT());
      }
      result = result && (
          Double.doubleToLongBits(getDClkBias())
          == Double.doubleToLongBits(
              other.getDClkBias()));
      result = result && (
          Double.doubleToLongBits(getDClkDrift())
          == Double.doubleToLongBits(
              other.getDClkDrift()));
      result = result && (
          Double.doubleToLongBits(getDClkRate())
          == Double.doubleToLongBits(
              other.getDClkRate()));
      result = result && (
          Double.doubleToLongBits(getDAODE())
          == Double.doubleToLongBits(
              other.getDAODE()));
      result = result && (
          Double.doubleToLongBits(getDCrs())
          == Double.doubleToLongBits(
              other.getDCrs()));
      result = result && (
          Double.doubleToLongBits(getDDeltaN())
          == Double.doubleToLongBits(
              other.getDDeltaN()));
      result = result && (
          Double.doubleToLongBits(getDM0())
          == Double.doubleToLongBits(
              other.getDM0()));
      result = result && (
          Double.doubleToLongBits(getDCuc())
          == Double.doubleToLongBits(
              other.getDCuc()));
      result = result && (
          Double.doubleToLongBits(getDe())
          == Double.doubleToLongBits(
              other.getDe()));
      result = result && (
          Double.doubleToLongBits(getDCus())
          == Double.doubleToLongBits(
              other.getDCus()));
      result = result && (
          Double.doubleToLongBits(getDSqrtA())
          == Double.doubleToLongBits(
              other.getDSqrtA()));
      result = result && (
          Double.doubleToLongBits(getDToe())
          == Double.doubleToLongBits(
              other.getDToe()));
      result = result && (
          Double.doubleToLongBits(getDCic())
          == Double.doubleToLongBits(
              other.getDCic()));
      result = result && (
          Double.doubleToLongBits(getDOmega())
          == Double.doubleToLongBits(
              other.getDOmega()));
      result = result && (
          Double.doubleToLongBits(getDCis())
          == Double.doubleToLongBits(
              other.getDCis()));
      result = result && (
          Double.doubleToLongBits(getDi0())
          == Double.doubleToLongBits(
              other.getDi0()));
      result = result && (
          Double.doubleToLongBits(getDCrc())
          == Double.doubleToLongBits(
              other.getDCrc()));
      result = result && (
          Double.doubleToLongBits(getDwe())
          == Double.doubleToLongBits(
              other.getDwe()));
      result = result && (
          Double.doubleToLongBits(getDDotOmega())
          == Double.doubleToLongBits(
              other.getDDotOmega()));
      result = result && (
          Double.doubleToLongBits(getDIDOT())
          == Double.doubleToLongBits(
              other.getDIDOT()));
      result = result && (
          Double.doubleToLongBits(getDCodesOnL2Channel())
          == Double.doubleToLongBits(
              other.getDCodesOnL2Channel()));
      result = result && (
          Double.doubleToLongBits(getDBdsWeek())
          == Double.doubleToLongBits(
              other.getDBdsWeek()));
      result = result && (
          Double.doubleToLongBits(getDL2PDataFlag())
          == Double.doubleToLongBits(
              other.getDL2PDataFlag()));
      result = result && (
          Double.doubleToLongBits(getDSVAcc())
          == Double.doubleToLongBits(
              other.getDSVAcc()));
      result = result && (
          Double.doubleToLongBits(getDSatH1())
          == Double.doubleToLongBits(
              other.getDSatH1()));
      result = result && (
          Double.doubleToLongBits(getDTGD1())
          == Double.doubleToLongBits(
              other.getDTGD1()));
      result = result && (
          Double.doubleToLongBits(getDTGD2())
          == Double.doubleToLongBits(
              other.getDTGD2()));
      result = result && (
          Double.doubleToLongBits(getDAODC())
          == Double.doubleToLongBits(
              other.getDAODC()));
      return result;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + STRSATSYS_FIELD_NUMBER;
      hash = (53 * hash) + getStrSatSys().hashCode();
      hash = (37 * hash) + IBDSPRN_FIELD_NUMBER;
      hash = (53 * hash) + getIBdsPrn();
      if (hasStToc()) {
        hash = (37 * hash) + STTOC_FIELD_NUMBER;
        hash = (53 * hash) + getStToc().hashCode();
      }
      if (hasStTocBdsT()) {
        hash = (37 * hash) + STTOCBDST_FIELD_NUMBER;
        hash = (53 * hash) + getStTocBdsT().hashCode();
      }
      hash = (37 * hash) + DCLKBIAS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDClkBias()));
      hash = (37 * hash) + DCLKDRIFT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDClkDrift()));
      hash = (37 * hash) + DCLKRATE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDClkRate()));
      hash = (37 * hash) + DAODE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDAODE()));
      hash = (37 * hash) + DCRS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDCrs()));
      hash = (37 * hash) + DDELTAN_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDDeltaN()));
      hash = (37 * hash) + DM0_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDM0()));
      hash = (37 * hash) + DCUC_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDCuc()));
      hash = (37 * hash) + DE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDe()));
      hash = (37 * hash) + DCUS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDCus()));
      hash = (37 * hash) + DSQRTA_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDSqrtA()));
      hash = (37 * hash) + DTOE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDToe()));
      hash = (37 * hash) + DCIC_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDCic()));
      hash = (37 * hash) + DOMEGA_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDOmega()));
      hash = (37 * hash) + DCIS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDCis()));
      hash = (37 * hash) + DI0_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDi0()));
      hash = (37 * hash) + DCRC_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDCrc()));
      hash = (37 * hash) + DWE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDwe()));
      hash = (37 * hash) + DDOTOMEGA_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDDotOmega()));
      hash = (37 * hash) + DIDOT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDIDOT()));
      hash = (37 * hash) + DCODESONL2CHANNEL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDCodesOnL2Channel()));
      hash = (37 * hash) + DBDSWEEK_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDBdsWeek()));
      hash = (37 * hash) + DL2PDATAFLAG_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDL2PDataFlag()));
      hash = (37 * hash) + DSVACC_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDSVAcc()));
      hash = (37 * hash) + DSATH1_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDSatH1()));
      hash = (37 * hash) + DTGD1_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDTGD1()));
      hash = (37 * hash) + DTGD2_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDTGD2()));
      hash = (37 * hash) + DAODC_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDAODC()));
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.chinalbs.pb.MotEph.StBdsBrdEph parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.chinalbs.pb.MotEph.StBdsBrdEph parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.chinalbs.pb.MotEph.StBdsBrdEph parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.chinalbs.pb.MotEph.StBdsBrdEph parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.chinalbs.pb.MotEph.StBdsBrdEph parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.chinalbs.pb.MotEph.StBdsBrdEph parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.chinalbs.pb.MotEph.StBdsBrdEph parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.chinalbs.pb.MotEph.StBdsBrdEph parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.chinalbs.pb.MotEph.StBdsBrdEph parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.chinalbs.pb.MotEph.StBdsBrdEph parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chinalbs.pb.MotEph.StBdsBrdEph prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *北斗星历
     * </pre>
     *
     * Protobuf type {@code org.stationharbor.model.StBdsBrdEph}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.stationharbor.model.StBdsBrdEph)
        org.chinalbs.pb.MotEph.StBdsBrdEphOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.chinalbs.pb.MotEph.internal_static_org_stationharbor_model_StBdsBrdEph_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.chinalbs.pb.MotEph.internal_static_org_stationharbor_model_StBdsBrdEph_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.chinalbs.pb.MotEph.StBdsBrdEph.class, org.chinalbs.pb.MotEph.StBdsBrdEph.Builder.class);
      }

      // Construct using org.chinalbs.pb.MotEph.StBdsBrdEph.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        strSatSys_ = "";

        iBdsPrn_ = 0;

        if (stTocBuilder_ == null) {
          stToc_ = null;
        } else {
          stToc_ = null;
          stTocBuilder_ = null;
        }
        if (stTocBdsTBuilder_ == null) {
          stTocBdsT_ = null;
        } else {
          stTocBdsT_ = null;
          stTocBdsTBuilder_ = null;
        }
        dClkBias_ = 0D;

        dClkDrift_ = 0D;

        dClkRate_ = 0D;

        dAODE_ = 0D;

        dCrs_ = 0D;

        dDeltaN_ = 0D;

        dM0_ = 0D;

        dCuc_ = 0D;

        de_ = 0D;

        dCus_ = 0D;

        dSqrtA_ = 0D;

        dToe_ = 0D;

        dCic_ = 0D;

        dOmega_ = 0D;

        dCis_ = 0D;

        di0_ = 0D;

        dCrc_ = 0D;

        dwe_ = 0D;

        dDotOmega_ = 0D;

        dIDOT_ = 0D;

        dCodesOnL2Channel_ = 0D;

        dBdsWeek_ = 0D;

        dL2PDataFlag_ = 0D;

        dSVAcc_ = 0D;

        dSatH1_ = 0D;

        dTGD1_ = 0D;

        dTGD2_ = 0D;

        dAODC_ = 0D;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.chinalbs.pb.MotEph.internal_static_org_stationharbor_model_StBdsBrdEph_descriptor;
      }

      public org.chinalbs.pb.MotEph.StBdsBrdEph getDefaultInstanceForType() {
        return org.chinalbs.pb.MotEph.StBdsBrdEph.getDefaultInstance();
      }

      public org.chinalbs.pb.MotEph.StBdsBrdEph build() {
        org.chinalbs.pb.MotEph.StBdsBrdEph result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.chinalbs.pb.MotEph.StBdsBrdEph buildPartial() {
        org.chinalbs.pb.MotEph.StBdsBrdEph result = new org.chinalbs.pb.MotEph.StBdsBrdEph(this);
        result.strSatSys_ = strSatSys_;
        result.iBdsPrn_ = iBdsPrn_;
        if (stTocBuilder_ == null) {
          result.stToc_ = stToc_;
        } else {
          result.stToc_ = stTocBuilder_.build();
        }
        if (stTocBdsTBuilder_ == null) {
          result.stTocBdsT_ = stTocBdsT_;
        } else {
          result.stTocBdsT_ = stTocBdsTBuilder_.build();
        }
        result.dClkBias_ = dClkBias_;
        result.dClkDrift_ = dClkDrift_;
        result.dClkRate_ = dClkRate_;
        result.dAODE_ = dAODE_;
        result.dCrs_ = dCrs_;
        result.dDeltaN_ = dDeltaN_;
        result.dM0_ = dM0_;
        result.dCuc_ = dCuc_;
        result.de_ = de_;
        result.dCus_ = dCus_;
        result.dSqrtA_ = dSqrtA_;
        result.dToe_ = dToe_;
        result.dCic_ = dCic_;
        result.dOmega_ = dOmega_;
        result.dCis_ = dCis_;
        result.di0_ = di0_;
        result.dCrc_ = dCrc_;
        result.dwe_ = dwe_;
        result.dDotOmega_ = dDotOmega_;
        result.dIDOT_ = dIDOT_;
        result.dCodesOnL2Channel_ = dCodesOnL2Channel_;
        result.dBdsWeek_ = dBdsWeek_;
        result.dL2PDataFlag_ = dL2PDataFlag_;
        result.dSVAcc_ = dSVAcc_;
        result.dSatH1_ = dSatH1_;
        result.dTGD1_ = dTGD1_;
        result.dTGD2_ = dTGD2_;
        result.dAODC_ = dAODC_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.chinalbs.pb.MotEph.StBdsBrdEph) {
          return mergeFrom((org.chinalbs.pb.MotEph.StBdsBrdEph)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.chinalbs.pb.MotEph.StBdsBrdEph other) {
        if (other == org.chinalbs.pb.MotEph.StBdsBrdEph.getDefaultInstance()) return this;
        if (!other.getStrSatSys().isEmpty()) {
          strSatSys_ = other.strSatSys_;
          onChanged();
        }
        if (other.getIBdsPrn() != 0) {
          setIBdsPrn(other.getIBdsPrn());
        }
        if (other.hasStToc()) {
          mergeStToc(other.getStToc());
        }
        if (other.hasStTocBdsT()) {
          mergeStTocBdsT(other.getStTocBdsT());
        }
        if (other.getDClkBias() != 0D) {
          setDClkBias(other.getDClkBias());
        }
        if (other.getDClkDrift() != 0D) {
          setDClkDrift(other.getDClkDrift());
        }
        if (other.getDClkRate() != 0D) {
          setDClkRate(other.getDClkRate());
        }
        if (other.getDAODE() != 0D) {
          setDAODE(other.getDAODE());
        }
        if (other.getDCrs() != 0D) {
          setDCrs(other.getDCrs());
        }
        if (other.getDDeltaN() != 0D) {
          setDDeltaN(other.getDDeltaN());
        }
        if (other.getDM0() != 0D) {
          setDM0(other.getDM0());
        }
        if (other.getDCuc() != 0D) {
          setDCuc(other.getDCuc());
        }
        if (other.getDe() != 0D) {
          setDe(other.getDe());
        }
        if (other.getDCus() != 0D) {
          setDCus(other.getDCus());
        }
        if (other.getDSqrtA() != 0D) {
          setDSqrtA(other.getDSqrtA());
        }
        if (other.getDToe() != 0D) {
          setDToe(other.getDToe());
        }
        if (other.getDCic() != 0D) {
          setDCic(other.getDCic());
        }
        if (other.getDOmega() != 0D) {
          setDOmega(other.getDOmega());
        }
        if (other.getDCis() != 0D) {
          setDCis(other.getDCis());
        }
        if (other.getDi0() != 0D) {
          setDi0(other.getDi0());
        }
        if (other.getDCrc() != 0D) {
          setDCrc(other.getDCrc());
        }
        if (other.getDwe() != 0D) {
          setDwe(other.getDwe());
        }
        if (other.getDDotOmega() != 0D) {
          setDDotOmega(other.getDDotOmega());
        }
        if (other.getDIDOT() != 0D) {
          setDIDOT(other.getDIDOT());
        }
        if (other.getDCodesOnL2Channel() != 0D) {
          setDCodesOnL2Channel(other.getDCodesOnL2Channel());
        }
        if (other.getDBdsWeek() != 0D) {
          setDBdsWeek(other.getDBdsWeek());
        }
        if (other.getDL2PDataFlag() != 0D) {
          setDL2PDataFlag(other.getDL2PDataFlag());
        }
        if (other.getDSVAcc() != 0D) {
          setDSVAcc(other.getDSVAcc());
        }
        if (other.getDSatH1() != 0D) {
          setDSatH1(other.getDSatH1());
        }
        if (other.getDTGD1() != 0D) {
          setDTGD1(other.getDTGD1());
        }
        if (other.getDTGD2() != 0D) {
          setDTGD2(other.getDTGD2());
        }
        if (other.getDAODC() != 0D) {
          setDAODC(other.getDAODC());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.chinalbs.pb.MotEph.StBdsBrdEph parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.chinalbs.pb.MotEph.StBdsBrdEph) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private Object strSatSys_ = "";
      /**
       * <pre>
       *卫星系统
       * </pre>
       *
       * <code>optional string strSatSys = 1;</code>
       */
      public String getStrSatSys() {
        Object ref = strSatSys_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          strSatSys_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       *卫星系统
       * </pre>
       *
       * <code>optional string strSatSys = 1;</code>
       */
      public com.google.protobuf.ByteString
          getStrSatSysBytes() {
        Object ref = strSatSys_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          strSatSys_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *卫星系统
       * </pre>
       *
       * <code>optional string strSatSys = 1;</code>
       */
      public Builder setStrSatSys(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        strSatSys_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *卫星系统
       * </pre>
       *
       * <code>optional string strSatSys = 1;</code>
       */
      public Builder clearStrSatSys() {
        
        strSatSys_ = getDefaultInstance().getStrSatSys();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *卫星系统
       * </pre>
       *
       * <code>optional string strSatSys = 1;</code>
       */
      public Builder setStrSatSysBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        strSatSys_ = value;
        onChanged();
        return this;
      }

      private int iBdsPrn_ ;
      /**
       * <code>optional int32 iBdsPrn = 2;</code>
       */
      public int getIBdsPrn() {
        return iBdsPrn_;
      }
      /**
       * <code>optional int32 iBdsPrn = 2;</code>
       */
      public Builder setIBdsPrn(int value) {
        
        iBdsPrn_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 iBdsPrn = 2;</code>
       */
      public Builder clearIBdsPrn() {
        
        iBdsPrn_ = 0;
        onChanged();
        return this;
      }

      private org.chinalbs.pb.MotCommon.StCOMT stToc_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.chinalbs.pb.MotCommon.StCOMT, org.chinalbs.pb.MotCommon.StCOMT.Builder, org.chinalbs.pb.MotCommon.StCOMTOrBuilder> stTocBuilder_;
      /**
       * <pre>
       *年月日时分秒
       * </pre>
       *
       * <code>optional .org.stationharbor.model.StCOMT stToc = 3;</code>
       */
      public boolean hasStToc() {
        return stTocBuilder_ != null || stToc_ != null;
      }
      /**
       * <pre>
       *年月日时分秒
       * </pre>
       *
       * <code>optional .org.stationharbor.model.StCOMT stToc = 3;</code>
       */
      public org.chinalbs.pb.MotCommon.StCOMT getStToc() {
        if (stTocBuilder_ == null) {
          return stToc_ == null ? org.chinalbs.pb.MotCommon.StCOMT.getDefaultInstance() : stToc_;
        } else {
          return stTocBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *年月日时分秒
       * </pre>
       *
       * <code>optional .org.stationharbor.model.StCOMT stToc = 3;</code>
       */
      public Builder setStToc(org.chinalbs.pb.MotCommon.StCOMT value) {
        if (stTocBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          stToc_ = value;
          onChanged();
        } else {
          stTocBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *年月日时分秒
       * </pre>
       *
       * <code>optional .org.stationharbor.model.StCOMT stToc = 3;</code>
       */
      public Builder setStToc(
          org.chinalbs.pb.MotCommon.StCOMT.Builder builderForValue) {
        if (stTocBuilder_ == null) {
          stToc_ = builderForValue.build();
          onChanged();
        } else {
          stTocBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *年月日时分秒
       * </pre>
       *
       * <code>optional .org.stationharbor.model.StCOMT stToc = 3;</code>
       */
      public Builder mergeStToc(org.chinalbs.pb.MotCommon.StCOMT value) {
        if (stTocBuilder_ == null) {
          if (stToc_ != null) {
            stToc_ =
              org.chinalbs.pb.MotCommon.StCOMT.newBuilder(stToc_).mergeFrom(value).buildPartial();
          } else {
            stToc_ = value;
          }
          onChanged();
        } else {
          stTocBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *年月日时分秒
       * </pre>
       *
       * <code>optional .org.stationharbor.model.StCOMT stToc = 3;</code>
       */
      public Builder clearStToc() {
        if (stTocBuilder_ == null) {
          stToc_ = null;
          onChanged();
        } else {
          stToc_ = null;
          stTocBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *年月日时分秒
       * </pre>
       *
       * <code>optional .org.stationharbor.model.StCOMT stToc = 3;</code>
       */
      public org.chinalbs.pb.MotCommon.StCOMT.Builder getStTocBuilder() {
        
        onChanged();
        return getStTocFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *年月日时分秒
       * </pre>
       *
       * <code>optional .org.stationharbor.model.StCOMT stToc = 3;</code>
       */
      public org.chinalbs.pb.MotCommon.StCOMTOrBuilder getStTocOrBuilder() {
        if (stTocBuilder_ != null) {
          return stTocBuilder_.getMessageOrBuilder();
        } else {
          return stToc_ == null ?
              org.chinalbs.pb.MotCommon.StCOMT.getDefaultInstance() : stToc_;
        }
      }
      /**
       * <pre>
       *年月日时分秒
       * </pre>
       *
       * <code>optional .org.stationharbor.model.StCOMT stToc = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.chinalbs.pb.MotCommon.StCOMT, org.chinalbs.pb.MotCommon.StCOMT.Builder, org.chinalbs.pb.MotCommon.StCOMTOrBuilder> 
          getStTocFieldBuilder() {
        if (stTocBuilder_ == null) {
          stTocBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.chinalbs.pb.MotCommon.StCOMT, org.chinalbs.pb.MotCommon.StCOMT.Builder, org.chinalbs.pb.MotCommon.StCOMTOrBuilder>(
                  getStToc(),
                  getParentForChildren(),
                  isClean());
          stToc_ = null;
        }
        return stTocBuilder_;
      }

      private org.chinalbs.pb.MotCommon.StBDST stTocBdsT_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.chinalbs.pb.MotCommon.StBDST, org.chinalbs.pb.MotCommon.StBDST.Builder, org.chinalbs.pb.MotCommon.StBDSTOrBuilder> stTocBdsTBuilder_;
      /**
       * <pre>
       *toc（周内秒）
       * </pre>
       *
       * <code>optional .org.stationharbor.model.StBDST stTocBdsT = 4;</code>
       */
      public boolean hasStTocBdsT() {
        return stTocBdsTBuilder_ != null || stTocBdsT_ != null;
      }
      /**
       * <pre>
       *toc（周内秒）
       * </pre>
       *
       * <code>optional .org.stationharbor.model.StBDST stTocBdsT = 4;</code>
       */
      public org.chinalbs.pb.MotCommon.StBDST getStTocBdsT() {
        if (stTocBdsTBuilder_ == null) {
          return stTocBdsT_ == null ? org.chinalbs.pb.MotCommon.StBDST.getDefaultInstance() : stTocBdsT_;
        } else {
          return stTocBdsTBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *toc（周内秒）
       * </pre>
       *
       * <code>optional .org.stationharbor.model.StBDST stTocBdsT = 4;</code>
       */
      public Builder setStTocBdsT(org.chinalbs.pb.MotCommon.StBDST value) {
        if (stTocBdsTBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          stTocBdsT_ = value;
          onChanged();
        } else {
          stTocBdsTBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *toc（周内秒）
       * </pre>
       *
       * <code>optional .org.stationharbor.model.StBDST stTocBdsT = 4;</code>
       */
      public Builder setStTocBdsT(
          org.chinalbs.pb.MotCommon.StBDST.Builder builderForValue) {
        if (stTocBdsTBuilder_ == null) {
          stTocBdsT_ = builderForValue.build();
          onChanged();
        } else {
          stTocBdsTBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *toc（周内秒）
       * </pre>
       *
       * <code>optional .org.stationharbor.model.StBDST stTocBdsT = 4;</code>
       */
      public Builder mergeStTocBdsT(org.chinalbs.pb.MotCommon.StBDST value) {
        if (stTocBdsTBuilder_ == null) {
          if (stTocBdsT_ != null) {
            stTocBdsT_ =
              org.chinalbs.pb.MotCommon.StBDST.newBuilder(stTocBdsT_).mergeFrom(value).buildPartial();
          } else {
            stTocBdsT_ = value;
          }
          onChanged();
        } else {
          stTocBdsTBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *toc（周内秒）
       * </pre>
       *
       * <code>optional .org.stationharbor.model.StBDST stTocBdsT = 4;</code>
       */
      public Builder clearStTocBdsT() {
        if (stTocBdsTBuilder_ == null) {
          stTocBdsT_ = null;
          onChanged();
        } else {
          stTocBdsT_ = null;
          stTocBdsTBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *toc（周内秒）
       * </pre>
       *
       * <code>optional .org.stationharbor.model.StBDST stTocBdsT = 4;</code>
       */
      public org.chinalbs.pb.MotCommon.StBDST.Builder getStTocBdsTBuilder() {
        
        onChanged();
        return getStTocBdsTFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *toc（周内秒）
       * </pre>
       *
       * <code>optional .org.stationharbor.model.StBDST stTocBdsT = 4;</code>
       */
      public org.chinalbs.pb.MotCommon.StBDSTOrBuilder getStTocBdsTOrBuilder() {
        if (stTocBdsTBuilder_ != null) {
          return stTocBdsTBuilder_.getMessageOrBuilder();
        } else {
          return stTocBdsT_ == null ?
              org.chinalbs.pb.MotCommon.StBDST.getDefaultInstance() : stTocBdsT_;
        }
      }
      /**
       * <pre>
       *toc（周内秒）
       * </pre>
       *
       * <code>optional .org.stationharbor.model.StBDST stTocBdsT = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.chinalbs.pb.MotCommon.StBDST, org.chinalbs.pb.MotCommon.StBDST.Builder, org.chinalbs.pb.MotCommon.StBDSTOrBuilder> 
          getStTocBdsTFieldBuilder() {
        if (stTocBdsTBuilder_ == null) {
          stTocBdsTBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.chinalbs.pb.MotCommon.StBDST, org.chinalbs.pb.MotCommon.StBDST.Builder, org.chinalbs.pb.MotCommon.StBDSTOrBuilder>(
                  getStTocBdsT(),
                  getParentForChildren(),
                  isClean());
          stTocBdsT_ = null;
        }
        return stTocBdsTBuilder_;
      }

      private double dClkBias_ ;
      /**
       * <code>optional double dClkBias = 5;</code>
       */
      public double getDClkBias() {
        return dClkBias_;
      }
      /**
       * <code>optional double dClkBias = 5;</code>
       */
      public Builder setDClkBias(double value) {
        
        dClkBias_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double dClkBias = 5;</code>
       */
      public Builder clearDClkBias() {
        
        dClkBias_ = 0D;
        onChanged();
        return this;
      }

      private double dClkDrift_ ;
      /**
       * <code>optional double dClkDrift = 6;</code>
       */
      public double getDClkDrift() {
        return dClkDrift_;
      }
      /**
       * <code>optional double dClkDrift = 6;</code>
       */
      public Builder setDClkDrift(double value) {
        
        dClkDrift_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double dClkDrift = 6;</code>
       */
      public Builder clearDClkDrift() {
        
        dClkDrift_ = 0D;
        onChanged();
        return this;
      }

      private double dClkRate_ ;
      /**
       * <code>optional double dClkRate = 7;</code>
       */
      public double getDClkRate() {
        return dClkRate_;
      }
      /**
       * <code>optional double dClkRate = 7;</code>
       */
      public Builder setDClkRate(double value) {
        
        dClkRate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double dClkRate = 7;</code>
       */
      public Builder clearDClkRate() {
        
        dClkRate_ = 0D;
        onChanged();
        return this;
      }

      private double dAODE_ ;
      /**
       * <pre>
       * Orbit1 
       * </pre>
       *
       * <code>optional double dAODE = 8;</code>
       */
      public double getDAODE() {
        return dAODE_;
      }
      /**
       * <pre>
       * Orbit1 
       * </pre>
       *
       * <code>optional double dAODE = 8;</code>
       */
      public Builder setDAODE(double value) {
        
        dAODE_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Orbit1 
       * </pre>
       *
       * <code>optional double dAODE = 8;</code>
       */
      public Builder clearDAODE() {
        
        dAODE_ = 0D;
        onChanged();
        return this;
      }

      private double dCrs_ ;
      /**
       * <pre>
       * radius correction sine(m) 
       * </pre>
       *
       * <code>optional double dCrs = 9;</code>
       */
      public double getDCrs() {
        return dCrs_;
      }
      /**
       * <pre>
       * radius correction sine(m) 
       * </pre>
       *
       * <code>optional double dCrs = 9;</code>
       */
      public Builder setDCrs(double value) {
        
        dCrs_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * radius correction sine(m) 
       * </pre>
       *
       * <code>optional double dCrs = 9;</code>
       */
      public Builder clearDCrs() {
        
        dCrs_ = 0D;
        onChanged();
        return this;
      }

      private double dDeltaN_ ;
      /**
       * <pre>
       * correction to mean motion(radians/sec) 
       * </pre>
       *
       * <code>optional double dDeltaN = 10;</code>
       */
      public double getDDeltaN() {
        return dDeltaN_;
      }
      /**
       * <pre>
       * correction to mean motion(radians/sec) 
       * </pre>
       *
       * <code>optional double dDeltaN = 10;</code>
       */
      public Builder setDDeltaN(double value) {
        
        dDeltaN_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * correction to mean motion(radians/sec) 
       * </pre>
       *
       * <code>optional double dDeltaN = 10;</code>
       */
      public Builder clearDDeltaN() {
        
        dDeltaN_ = 0D;
        onChanged();
        return this;
      }

      private double dM0_ ;
      /**
       * <pre>
       * mean anomaly (radians) 
       * </pre>
       *
       * <code>optional double dM0 = 11;</code>
       */
      public double getDM0() {
        return dM0_;
      }
      /**
       * <pre>
       * mean anomaly (radians) 
       * </pre>
       *
       * <code>optional double dM0 = 11;</code>
       */
      public Builder setDM0(double value) {
        
        dM0_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * mean anomaly (radians) 
       * </pre>
       *
       * <code>optional double dM0 = 11;</code>
       */
      public Builder clearDM0() {
        
        dM0_ = 0D;
        onChanged();
        return this;
      }

      private double dCuc_ ;
      /**
       * <pre>
       * Orbit2 
       * </pre>
       *
       * <code>optional double dCuc = 12;</code>
       */
      public double getDCuc() {
        return dCuc_;
      }
      /**
       * <pre>
       * Orbit2 
       * </pre>
       *
       * <code>optional double dCuc = 12;</code>
       */
      public Builder setDCuc(double value) {
        
        dCuc_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Orbit2 
       * </pre>
       *
       * <code>optional double dCuc = 12;</code>
       */
      public Builder clearDCuc() {
        
        dCuc_ = 0D;
        onChanged();
        return this;
      }

      private double de_ ;
      /**
       * <pre>
       * eccentricity 
       * </pre>
       *
       * <code>optional double de = 13;</code>
       */
      public double getDe() {
        return de_;
      }
      /**
       * <pre>
       * eccentricity 
       * </pre>
       *
       * <code>optional double de = 13;</code>
       */
      public Builder setDe(double value) {
        
        de_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * eccentricity 
       * </pre>
       *
       * <code>optional double de = 13;</code>
       */
      public Builder clearDe() {
        
        de_ = 0D;
        onChanged();
        return this;
      }

      private double dCus_ ;
      /**
       * <pre>
       * correction to argument in latitude sine(radians) 
       * </pre>
       *
       * <code>optional double dCus = 14;</code>
       */
      public double getDCus() {
        return dCus_;
      }
      /**
       * <pre>
       * correction to argument in latitude sine(radians) 
       * </pre>
       *
       * <code>optional double dCus = 14;</code>
       */
      public Builder setDCus(double value) {
        
        dCus_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * correction to argument in latitude sine(radians) 
       * </pre>
       *
       * <code>optional double dCus = 14;</code>
       */
      public Builder clearDCus() {
        
        dCus_ = 0D;
        onChanged();
        return this;
      }

      private double dSqrtA_ ;
      /**
       * <pre>
       * square root if semi-major axis(m^0.5) 
       * </pre>
       *
       * <code>optional double dSqrtA = 15;</code>
       */
      public double getDSqrtA() {
        return dSqrtA_;
      }
      /**
       * <pre>
       * square root if semi-major axis(m^0.5) 
       * </pre>
       *
       * <code>optional double dSqrtA = 15;</code>
       */
      public Builder setDSqrtA(double value) {
        
        dSqrtA_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * square root if semi-major axis(m^0.5) 
       * </pre>
       *
       * <code>optional double dSqrtA = 15;</code>
       */
      public Builder clearDSqrtA() {
        
        dSqrtA_ = 0D;
        onChanged();
        return this;
      }

      private double dToe_ ;
      /**
       * <pre>
       * Orbit3 
       * </pre>
       *
       * <code>optional double dToe = 16;</code>
       */
      public double getDToe() {
        return dToe_;
      }
      /**
       * <pre>
       * Orbit3 
       * </pre>
       *
       * <code>optional double dToe = 16;</code>
       */
      public Builder setDToe(double value) {
        
        dToe_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Orbit3 
       * </pre>
       *
       * <code>optional double dToe = 16;</code>
       */
      public Builder clearDToe() {
        
        dToe_ = 0D;
        onChanged();
        return this;
      }

      private double dCic_ ;
      /**
       * <pre>
       * correction to inclination,cosine(radians) 
       * </pre>
       *
       * <code>optional double dCic = 17;</code>
       */
      public double getDCic() {
        return dCic_;
      }
      /**
       * <pre>
       * correction to inclination,cosine(radians) 
       * </pre>
       *
       * <code>optional double dCic = 17;</code>
       */
      public Builder setDCic(double value) {
        
        dCic_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * correction to inclination,cosine(radians) 
       * </pre>
       *
       * <code>optional double dCic = 17;</code>
       */
      public Builder clearDCic() {
        
        dCic_ = 0D;
        onChanged();
        return this;
      }

      private double dOmega_ ;
      /**
       * <pre>
       * langitude of theasecending node (radians) Capital omega 
       * </pre>
       *
       * <code>optional double dOmega = 18;</code>
       */
      public double getDOmega() {
        return dOmega_;
      }
      /**
       * <pre>
       * langitude of theasecending node (radians) Capital omega 
       * </pre>
       *
       * <code>optional double dOmega = 18;</code>
       */
      public Builder setDOmega(double value) {
        
        dOmega_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * langitude of theasecending node (radians) Capital omega 
       * </pre>
       *
       * <code>optional double dOmega = 18;</code>
       */
      public Builder clearDOmega() {
        
        dOmega_ = 0D;
        onChanged();
        return this;
      }

      private double dCis_ ;
      /**
       * <pre>
       * corrction to inclination,sine(radians) 
       * </pre>
       *
       * <code>optional double dCis = 19;</code>
       */
      public double getDCis() {
        return dCis_;
      }
      /**
       * <pre>
       * corrction to inclination,sine(radians) 
       * </pre>
       *
       * <code>optional double dCis = 19;</code>
       */
      public Builder setDCis(double value) {
        
        dCis_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * corrction to inclination,sine(radians) 
       * </pre>
       *
       * <code>optional double dCis = 19;</code>
       */
      public Builder clearDCis() {
        
        dCis_ = 0D;
        onChanged();
        return this;
      }

      private double di0_ ;
      /**
       * <pre>
       * Orbit4 
       * </pre>
       *
       * <code>optional double di0 = 20;</code>
       */
      public double getDi0() {
        return di0_;
      }
      /**
       * <pre>
       * Orbit4 
       * </pre>
       *
       * <code>optional double di0 = 20;</code>
       */
      public Builder setDi0(double value) {
        
        di0_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Orbit4 
       * </pre>
       *
       * <code>optional double di0 = 20;</code>
       */
      public Builder clearDi0() {
        
        di0_ = 0D;
        onChanged();
        return this;
      }

      private double dCrc_ ;
      /**
       * <pre>
       * radius correction(m) 
       * </pre>
       *
       * <code>optional double dCrc = 21;</code>
       */
      public double getDCrc() {
        return dCrc_;
      }
      /**
       * <pre>
       * radius correction(m) 
       * </pre>
       *
       * <code>optional double dCrc = 21;</code>
       */
      public Builder setDCrc(double value) {
        
        dCrc_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * radius correction(m) 
       * </pre>
       *
       * <code>optional double dCrc = 21;</code>
       */
      public Builder clearDCrc() {
        
        dCrc_ = 0D;
        onChanged();
        return this;
      }

      private double dwe_ ;
      /**
       * <pre>
       * argument of perigee(radians) lower case omega 
       * </pre>
       *
       * <code>optional double dwe = 22;</code>
       */
      public double getDwe() {
        return dwe_;
      }
      /**
       * <pre>
       * argument of perigee(radians) lower case omega 
       * </pre>
       *
       * <code>optional double dwe = 22;</code>
       */
      public Builder setDwe(double value) {
        
        dwe_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * argument of perigee(radians) lower case omega 
       * </pre>
       *
       * <code>optional double dwe = 22;</code>
       */
      public Builder clearDwe() {
        
        dwe_ = 0D;
        onChanged();
        return this;
      }

      private double dDotOmega_ ;
      /**
       * <pre>
       * time derivative of longitude of the ascending node(radians/sec) 
       * </pre>
       *
       * <code>optional double dDotOmega = 23;</code>
       */
      public double getDDotOmega() {
        return dDotOmega_;
      }
      /**
       * <pre>
       * time derivative of longitude of the ascending node(radians/sec) 
       * </pre>
       *
       * <code>optional double dDotOmega = 23;</code>
       */
      public Builder setDDotOmega(double value) {
        
        dDotOmega_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * time derivative of longitude of the ascending node(radians/sec) 
       * </pre>
       *
       * <code>optional double dDotOmega = 23;</code>
       */
      public Builder clearDDotOmega() {
        
        dDotOmega_ = 0D;
        onChanged();
        return this;
      }

      private double dIDOT_ ;
      /**
       * <pre>
       * Orbit5 
       * </pre>
       *
       * <code>optional double dIDOT = 24;</code>
       */
      public double getDIDOT() {
        return dIDOT_;
      }
      /**
       * <pre>
       * Orbit5 
       * </pre>
       *
       * <code>optional double dIDOT = 24;</code>
       */
      public Builder setDIDOT(double value) {
        
        dIDOT_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Orbit5 
       * </pre>
       *
       * <code>optional double dIDOT = 24;</code>
       */
      public Builder clearDIDOT() {
        
        dIDOT_ = 0D;
        onChanged();
        return this;
      }

      private double dCodesOnL2Channel_ ;
      /**
       * <pre>
       * flags whose meaning is not clear 
       * </pre>
       *
       * <code>optional double dCodesOnL2Channel = 25;</code>
       */
      public double getDCodesOnL2Channel() {
        return dCodesOnL2Channel_;
      }
      /**
       * <pre>
       * flags whose meaning is not clear 
       * </pre>
       *
       * <code>optional double dCodesOnL2Channel = 25;</code>
       */
      public Builder setDCodesOnL2Channel(double value) {
        
        dCodesOnL2Channel_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * flags whose meaning is not clear 
       * </pre>
       *
       * <code>optional double dCodesOnL2Channel = 25;</code>
       */
      public Builder clearDCodesOnL2Channel() {
        
        dCodesOnL2Channel_ = 0D;
        onChanged();
        return this;
      }

      private double dBdsWeek_ ;
      /**
       * <pre>
       * GPS week number 
       * </pre>
       *
       * <code>optional double dBdsWeek = 26;</code>
       */
      public double getDBdsWeek() {
        return dBdsWeek_;
      }
      /**
       * <pre>
       * GPS week number 
       * </pre>
       *
       * <code>optional double dBdsWeek = 26;</code>
       */
      public Builder setDBdsWeek(double value) {
        
        dBdsWeek_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * GPS week number 
       * </pre>
       *
       * <code>optional double dBdsWeek = 26;</code>
       */
      public Builder clearDBdsWeek() {
        
        dBdsWeek_ = 0D;
        onChanged();
        return this;
      }

      private double dL2PDataFlag_ ;
      /**
       * <pre>
       * Flags whose meaning is not clear 
       * </pre>
       *
       * <code>optional double dL2PDataFlag = 27;</code>
       */
      public double getDL2PDataFlag() {
        return dL2PDataFlag_;
      }
      /**
       * <pre>
       * Flags whose meaning is not clear 
       * </pre>
       *
       * <code>optional double dL2PDataFlag = 27;</code>
       */
      public Builder setDL2PDataFlag(double value) {
        
        dL2PDataFlag_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Flags whose meaning is not clear 
       * </pre>
       *
       * <code>optional double dL2PDataFlag = 27;</code>
       */
      public Builder clearDL2PDataFlag() {
        
        dL2PDataFlag_ = 0D;
        onChanged();
        return this;
      }

      private double dSVAcc_ ;
      /**
       * <pre>
       * Orbit6 
       * </pre>
       *
       * <code>optional double dSVAcc = 28;</code>
       */
      public double getDSVAcc() {
        return dSVAcc_;
      }
      /**
       * <pre>
       * Orbit6 
       * </pre>
       *
       * <code>optional double dSVAcc = 28;</code>
       */
      public Builder setDSVAcc(double value) {
        
        dSVAcc_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Orbit6 
       * </pre>
       *
       * <code>optional double dSVAcc = 28;</code>
       */
      public Builder clearDSVAcc() {
        
        dSVAcc_ = 0D;
        onChanged();
        return this;
      }

      private double dSatH1_ ;
      /**
       * <pre>
       * satellite health flag 
       * </pre>
       *
       * <code>optional double dSatH1 = 29;</code>
       */
      public double getDSatH1() {
        return dSatH1_;
      }
      /**
       * <pre>
       * satellite health flag 
       * </pre>
       *
       * <code>optional double dSatH1 = 29;</code>
       */
      public Builder setDSatH1(double value) {
        
        dSatH1_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * satellite health flag 
       * </pre>
       *
       * <code>optional double dSatH1 = 29;</code>
       */
      public Builder clearDSatH1() {
        
        dSatH1_ = 0D;
        onChanged();
        return this;
      }

      private double dTGD1_ ;
      /**
       * <pre>
       * Group delay L2 bias (word 7 subframe 1) 
       * </pre>
       *
       * <code>optional double dTGD1 = 30;</code>
       */
      public double getDTGD1() {
        return dTGD1_;
      }
      /**
       * <pre>
       * Group delay L2 bias (word 7 subframe 1) 
       * </pre>
       *
       * <code>optional double dTGD1 = 30;</code>
       */
      public Builder setDTGD1(double value) {
        
        dTGD1_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Group delay L2 bias (word 7 subframe 1) 
       * </pre>
       *
       * <code>optional double dTGD1 = 30;</code>
       */
      public Builder clearDTGD1() {
        
        dTGD1_ = 0D;
        onChanged();
        return this;
      }

      private double dTGD2_ ;
      /**
       * <pre>
       * age of clock parameter upload (sec) 
       * </pre>
       *
       * <code>optional double dTGD2 = 31;</code>
       */
      public double getDTGD2() {
        return dTGD2_;
      }
      /**
       * <pre>
       * age of clock parameter upload (sec) 
       * </pre>
       *
       * <code>optional double dTGD2 = 31;</code>
       */
      public Builder setDTGD2(double value) {
        
        dTGD2_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * age of clock parameter upload (sec) 
       * </pre>
       *
       * <code>optional double dTGD2 = 31;</code>
       */
      public Builder clearDTGD2() {
        
        dTGD2_ = 0D;
        onChanged();
        return this;
      }

      private double dAODC_ ;
      /**
       * <code>optional double dAODC = 32;</code>
       */
      public double getDAODC() {
        return dAODC_;
      }
      /**
       * <code>optional double dAODC = 32;</code>
       */
      public Builder setDAODC(double value) {
        
        dAODC_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double dAODC = 32;</code>
       */
      public Builder clearDAODC() {
        
        dAODC_ = 0D;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:org.stationharbor.model.StBdsBrdEph)
    }

    // @@protoc_insertion_point(class_scope:org.stationharbor.model.StBdsBrdEph)
    private static final org.chinalbs.pb.MotEph.StBdsBrdEph DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.chinalbs.pb.MotEph.StBdsBrdEph();
    }

    public static org.chinalbs.pb.MotEph.StBdsBrdEph getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StBdsBrdEph>
        PARSER = new com.google.protobuf.AbstractParser<StBdsBrdEph>() {
      public StBdsBrdEph parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new StBdsBrdEph(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StBdsBrdEph> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<StBdsBrdEph> getParserForType() {
      return PARSER;
    }

    public org.chinalbs.pb.MotEph.StBdsBrdEph getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StGpsBrdEphOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.stationharbor.model.StGpsBrdEph)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string strSatSys = 1;</code>
     */
    String getStrSatSys();
    /**
     * <code>optional string strSatSys = 1;</code>
     */
    com.google.protobuf.ByteString
        getStrSatSysBytes();

    /**
     * <code>optional int32 iGpsPrn = 2;</code>
     */
    int getIGpsPrn();

    /**
     * <code>optional .org.stationharbor.model.StCOMT stToc = 3;</code>
     */
    boolean hasStToc();
    /**
     * <code>optional .org.stationharbor.model.StCOMT stToc = 3;</code>
     */
    org.chinalbs.pb.MotCommon.StCOMT getStToc();
    /**
     * <code>optional .org.stationharbor.model.StCOMT stToc = 3;</code>
     */
    org.chinalbs.pb.MotCommon.StCOMTOrBuilder getStTocOrBuilder();

    /**
     * <code>optional .org.stationharbor.model.StGPST stTocGpsT = 4;</code>
     */
    boolean hasStTocGpsT();
    /**
     * <code>optional .org.stationharbor.model.StGPST stTocGpsT = 4;</code>
     */
    org.chinalbs.pb.MotCommon.StGPST getStTocGpsT();
    /**
     * <code>optional .org.stationharbor.model.StGPST stTocGpsT = 4;</code>
     */
    org.chinalbs.pb.MotCommon.StGPSTOrBuilder getStTocGpsTOrBuilder();

    /**
     * <pre>
     *af0
     * </pre>
     *
     * <code>optional double dClkBias = 5;</code>
     */
    double getDClkBias();

    /**
     * <pre>
     *af1
     * </pre>
     *
     * <code>optional double dClkDrift = 6;</code>
     */
    double getDClkDrift();

    /**
     * <pre>
     *af2
     * </pre>
     *
     * <code>optional double dClkRate = 7;</code>
     */
    double getDClkRate();

    /**
     * <pre>
     * Orbit1 
     * </pre>
     *
     * <code>optional double dIODE = 8;</code>
     */
    double getDIODE();

    /**
     * <pre>
     * radius correction sine(m) 
     * </pre>
     *
     * <code>optional double dCrs = 9;</code>
     */
    double getDCrs();

    /**
     * <pre>
     * correction to mean motion(radians/sec) 
     * </pre>
     *
     * <code>optional double dDeltaN = 10;</code>
     */
    double getDDeltaN();

    /**
     * <pre>
     * mean anomaly (radians) 
     * </pre>
     *
     * <code>optional double dM0 = 11;</code>
     */
    double getDM0();

    /**
     * <pre>
     * Orbit2 
     * </pre>
     *
     * <code>optional double dCuc = 12;</code>
     */
    double getDCuc();

    /**
     * <pre>
     * eccentricity 
     * </pre>
     *
     * <code>optional double de = 13;</code>
     */
    double getDe();

    /**
     * <pre>
     * correction to argument in latitude sine(radians) 
     * </pre>
     *
     * <code>optional double dCus = 14;</code>
     */
    double getDCus();

    /**
     * <pre>
     * square root if semi-major axis(m^0.5) 
     * </pre>
     *
     * <code>optional double dSqrtA = 15;</code>
     */
    double getDSqrtA();

    /**
     * <pre>
     * Orbit3 
     * </pre>
     *
     * <code>optional double dToe = 16;</code>
     */
    double getDToe();

    /**
     * <pre>
     * correction to inclination,cosine(radians) 
     * </pre>
     *
     * <code>optional double dCic = 17;</code>
     */
    double getDCic();

    /**
     * <pre>
     * langitude of theasecending node (radians) Capital omega 
     * </pre>
     *
     * <code>optional double dOmega = 18;</code>
     */
    double getDOmega();

    /**
     * <pre>
     * corrction to inclination,sine(radians) 
     * </pre>
     *
     * <code>optional double dCis = 19;</code>
     */
    double getDCis();

    /**
     * <pre>
     * Orbit4 
     * </pre>
     *
     * <code>optional double di0 = 20;</code>
     */
    double getDi0();

    /**
     * <pre>
     * radius correction(m) 
     * </pre>
     *
     * <code>optional double dCrc = 21;</code>
     */
    double getDCrc();

    /**
     * <pre>
     * argument of perigee(radians) lower case omega 
     * </pre>
     *
     * <code>optional double dwe = 22;</code>
     */
    double getDwe();

    /**
     * <pre>
     * time derivative of longitude of the ascending node(radians/sec) 
     * </pre>
     *
     * <code>optional double dDotOmega = 23;</code>
     */
    double getDDotOmega();

    /**
     * <pre>
     * Orbit5 
     * </pre>
     *
     * <code>optional double dIDOT = 24;</code>
     */
    double getDIDOT();

    /**
     * <pre>
     * flags whose meaning is not clear 
     * </pre>
     *
     * <code>optional double dCodesOnL2Channel = 25;</code>
     */
    double getDCodesOnL2Channel();

    /**
     * <pre>
     * GPS week number 
     * </pre>
     *
     * <code>optional double dGpsWeek = 26;</code>
     */
    double getDGpsWeek();

    /**
     * <pre>
     * Flags whose meaning is not clear 
     * </pre>
     *
     * <code>optional double dL2PDataFlag = 27;</code>
     */
    double getDL2PDataFlag();

    /**
     * <pre>
     * Orbit6 
     * </pre>
     *
     * <code>optional double dSVAcc = 28;</code>
     */
    double getDSVAcc();

    /**
     * <pre>
     * satellite health flag 
     * </pre>
     *
     * <code>optional double dSVHealth = 29;</code>
     */
    double getDSVHealth();

    /**
     * <pre>
     * Group delay L2 bias (word 7 subframe 1) 
     * </pre>
     *
     * <code>optional double dTGD = 30;</code>
     */
    double getDTGD();

    /**
     * <pre>
     * age of clock parameter upload (sec) 
     * </pre>
     *
     * <code>optional double dIODC = 31;</code>
     */
    double getDIODC();
  }
  /**
   * <pre>
   *GPS 广播星历
   * </pre>
   *
   * Protobuf type {@code org.stationharbor.model.StGpsBrdEph}
   */
  public  static final class StGpsBrdEph extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.stationharbor.model.StGpsBrdEph)
      StGpsBrdEphOrBuilder {
    // Use StGpsBrdEph.newBuilder() to construct.
    private StGpsBrdEph(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StGpsBrdEph() {
      strSatSys_ = "";
      iGpsPrn_ = 0;
      dClkBias_ = 0D;
      dClkDrift_ = 0D;
      dClkRate_ = 0D;
      dIODE_ = 0D;
      dCrs_ = 0D;
      dDeltaN_ = 0D;
      dM0_ = 0D;
      dCuc_ = 0D;
      de_ = 0D;
      dCus_ = 0D;
      dSqrtA_ = 0D;
      dToe_ = 0D;
      dCic_ = 0D;
      dOmega_ = 0D;
      dCis_ = 0D;
      di0_ = 0D;
      dCrc_ = 0D;
      dwe_ = 0D;
      dDotOmega_ = 0D;
      dIDOT_ = 0D;
      dCodesOnL2Channel_ = 0D;
      dGpsWeek_ = 0D;
      dL2PDataFlag_ = 0D;
      dSVAcc_ = 0D;
      dSVHealth_ = 0D;
      dTGD_ = 0D;
      dIODC_ = 0D;
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private StGpsBrdEph(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              String s = input.readStringRequireUtf8();

              strSatSys_ = s;
              break;
            }
            case 16: {

              iGpsPrn_ = input.readInt32();
              break;
            }
            case 26: {
              org.chinalbs.pb.MotCommon.StCOMT.Builder subBuilder = null;
              if (stToc_ != null) {
                subBuilder = stToc_.toBuilder();
              }
              stToc_ = input.readMessage(org.chinalbs.pb.MotCommon.StCOMT.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(stToc_);
                stToc_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              org.chinalbs.pb.MotCommon.StGPST.Builder subBuilder = null;
              if (stTocGpsT_ != null) {
                subBuilder = stTocGpsT_.toBuilder();
              }
              stTocGpsT_ = input.readMessage(org.chinalbs.pb.MotCommon.StGPST.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(stTocGpsT_);
                stTocGpsT_ = subBuilder.buildPartial();
              }

              break;
            }
            case 41: {

              dClkBias_ = input.readDouble();
              break;
            }
            case 49: {

              dClkDrift_ = input.readDouble();
              break;
            }
            case 57: {

              dClkRate_ = input.readDouble();
              break;
            }
            case 65: {

              dIODE_ = input.readDouble();
              break;
            }
            case 73: {

              dCrs_ = input.readDouble();
              break;
            }
            case 81: {

              dDeltaN_ = input.readDouble();
              break;
            }
            case 89: {

              dM0_ = input.readDouble();
              break;
            }
            case 97: {

              dCuc_ = input.readDouble();
              break;
            }
            case 105: {

              de_ = input.readDouble();
              break;
            }
            case 113: {

              dCus_ = input.readDouble();
              break;
            }
            case 121: {

              dSqrtA_ = input.readDouble();
              break;
            }
            case 129: {

              dToe_ = input.readDouble();
              break;
            }
            case 137: {

              dCic_ = input.readDouble();
              break;
            }
            case 145: {

              dOmega_ = input.readDouble();
              break;
            }
            case 153: {

              dCis_ = input.readDouble();
              break;
            }
            case 161: {

              di0_ = input.readDouble();
              break;
            }
            case 169: {

              dCrc_ = input.readDouble();
              break;
            }
            case 177: {

              dwe_ = input.readDouble();
              break;
            }
            case 185: {

              dDotOmega_ = input.readDouble();
              break;
            }
            case 193: {

              dIDOT_ = input.readDouble();
              break;
            }
            case 201: {

              dCodesOnL2Channel_ = input.readDouble();
              break;
            }
            case 209: {

              dGpsWeek_ = input.readDouble();
              break;
            }
            case 217: {

              dL2PDataFlag_ = input.readDouble();
              break;
            }
            case 225: {

              dSVAcc_ = input.readDouble();
              break;
            }
            case 233: {

              dSVHealth_ = input.readDouble();
              break;
            }
            case 241: {

              dTGD_ = input.readDouble();
              break;
            }
            case 249: {

              dIODC_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.chinalbs.pb.MotEph.internal_static_org_stationharbor_model_StGpsBrdEph_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.chinalbs.pb.MotEph.internal_static_org_stationharbor_model_StGpsBrdEph_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.chinalbs.pb.MotEph.StGpsBrdEph.class, org.chinalbs.pb.MotEph.StGpsBrdEph.Builder.class);
    }

    public static final int STRSATSYS_FIELD_NUMBER = 1;
    private volatile Object strSatSys_;
    /**
     * <code>optional string strSatSys = 1;</code>
     */
    public String getStrSatSys() {
      Object ref = strSatSys_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        strSatSys_ = s;
        return s;
      }
    }
    /**
     * <code>optional string strSatSys = 1;</code>
     */
    public com.google.protobuf.ByteString
        getStrSatSysBytes() {
      Object ref = strSatSys_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        strSatSys_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int IGPSPRN_FIELD_NUMBER = 2;
    private int iGpsPrn_;
    /**
     * <code>optional int32 iGpsPrn = 2;</code>
     */
    public int getIGpsPrn() {
      return iGpsPrn_;
    }

    public static final int STTOC_FIELD_NUMBER = 3;
    private org.chinalbs.pb.MotCommon.StCOMT stToc_;
    /**
     * <code>optional .org.stationharbor.model.StCOMT stToc = 3;</code>
     */
    public boolean hasStToc() {
      return stToc_ != null;
    }
    /**
     * <code>optional .org.stationharbor.model.StCOMT stToc = 3;</code>
     */
    public org.chinalbs.pb.MotCommon.StCOMT getStToc() {
      return stToc_ == null ? org.chinalbs.pb.MotCommon.StCOMT.getDefaultInstance() : stToc_;
    }
    /**
     * <code>optional .org.stationharbor.model.StCOMT stToc = 3;</code>
     */
    public org.chinalbs.pb.MotCommon.StCOMTOrBuilder getStTocOrBuilder() {
      return getStToc();
    }

    public static final int STTOCGPST_FIELD_NUMBER = 4;
    private org.chinalbs.pb.MotCommon.StGPST stTocGpsT_;
    /**
     * <code>optional .org.stationharbor.model.StGPST stTocGpsT = 4;</code>
     */
    public boolean hasStTocGpsT() {
      return stTocGpsT_ != null;
    }
    /**
     * <code>optional .org.stationharbor.model.StGPST stTocGpsT = 4;</code>
     */
    public org.chinalbs.pb.MotCommon.StGPST getStTocGpsT() {
      return stTocGpsT_ == null ? org.chinalbs.pb.MotCommon.StGPST.getDefaultInstance() : stTocGpsT_;
    }
    /**
     * <code>optional .org.stationharbor.model.StGPST stTocGpsT = 4;</code>
     */
    public org.chinalbs.pb.MotCommon.StGPSTOrBuilder getStTocGpsTOrBuilder() {
      return getStTocGpsT();
    }

    public static final int DCLKBIAS_FIELD_NUMBER = 5;
    private double dClkBias_;
    /**
     * <pre>
     *af0
     * </pre>
     *
     * <code>optional double dClkBias = 5;</code>
     */
    public double getDClkBias() {
      return dClkBias_;
    }

    public static final int DCLKDRIFT_FIELD_NUMBER = 6;
    private double dClkDrift_;
    /**
     * <pre>
     *af1
     * </pre>
     *
     * <code>optional double dClkDrift = 6;</code>
     */
    public double getDClkDrift() {
      return dClkDrift_;
    }

    public static final int DCLKRATE_FIELD_NUMBER = 7;
    private double dClkRate_;
    /**
     * <pre>
     *af2
     * </pre>
     *
     * <code>optional double dClkRate = 7;</code>
     */
    public double getDClkRate() {
      return dClkRate_;
    }

    public static final int DIODE_FIELD_NUMBER = 8;
    private double dIODE_;
    /**
     * <pre>
     * Orbit1 
     * </pre>
     *
     * <code>optional double dIODE = 8;</code>
     */
    public double getDIODE() {
      return dIODE_;
    }

    public static final int DCRS_FIELD_NUMBER = 9;
    private double dCrs_;
    /**
     * <pre>
     * radius correction sine(m) 
     * </pre>
     *
     * <code>optional double dCrs = 9;</code>
     */
    public double getDCrs() {
      return dCrs_;
    }

    public static final int DDELTAN_FIELD_NUMBER = 10;
    private double dDeltaN_;
    /**
     * <pre>
     * correction to mean motion(radians/sec) 
     * </pre>
     *
     * <code>optional double dDeltaN = 10;</code>
     */
    public double getDDeltaN() {
      return dDeltaN_;
    }

    public static final int DM0_FIELD_NUMBER = 11;
    private double dM0_;
    /**
     * <pre>
     * mean anomaly (radians) 
     * </pre>
     *
     * <code>optional double dM0 = 11;</code>
     */
    public double getDM0() {
      return dM0_;
    }

    public static final int DCUC_FIELD_NUMBER = 12;
    private double dCuc_;
    /**
     * <pre>
     * Orbit2 
     * </pre>
     *
     * <code>optional double dCuc = 12;</code>
     */
    public double getDCuc() {
      return dCuc_;
    }

    public static final int DE_FIELD_NUMBER = 13;
    private double de_;
    /**
     * <pre>
     * eccentricity 
     * </pre>
     *
     * <code>optional double de = 13;</code>
     */
    public double getDe() {
      return de_;
    }

    public static final int DCUS_FIELD_NUMBER = 14;
    private double dCus_;
    /**
     * <pre>
     * correction to argument in latitude sine(radians) 
     * </pre>
     *
     * <code>optional double dCus = 14;</code>
     */
    public double getDCus() {
      return dCus_;
    }

    public static final int DSQRTA_FIELD_NUMBER = 15;
    private double dSqrtA_;
    /**
     * <pre>
     * square root if semi-major axis(m^0.5) 
     * </pre>
     *
     * <code>optional double dSqrtA = 15;</code>
     */
    public double getDSqrtA() {
      return dSqrtA_;
    }

    public static final int DTOE_FIELD_NUMBER = 16;
    private double dToe_;
    /**
     * <pre>
     * Orbit3 
     * </pre>
     *
     * <code>optional double dToe = 16;</code>
     */
    public double getDToe() {
      return dToe_;
    }

    public static final int DCIC_FIELD_NUMBER = 17;
    private double dCic_;
    /**
     * <pre>
     * correction to inclination,cosine(radians) 
     * </pre>
     *
     * <code>optional double dCic = 17;</code>
     */
    public double getDCic() {
      return dCic_;
    }

    public static final int DOMEGA_FIELD_NUMBER = 18;
    private double dOmega_;
    /**
     * <pre>
     * langitude of theasecending node (radians) Capital omega 
     * </pre>
     *
     * <code>optional double dOmega = 18;</code>
     */
    public double getDOmega() {
      return dOmega_;
    }

    public static final int DCIS_FIELD_NUMBER = 19;
    private double dCis_;
    /**
     * <pre>
     * corrction to inclination,sine(radians) 
     * </pre>
     *
     * <code>optional double dCis = 19;</code>
     */
    public double getDCis() {
      return dCis_;
    }

    public static final int DI0_FIELD_NUMBER = 20;
    private double di0_;
    /**
     * <pre>
     * Orbit4 
     * </pre>
     *
     * <code>optional double di0 = 20;</code>
     */
    public double getDi0() {
      return di0_;
    }

    public static final int DCRC_FIELD_NUMBER = 21;
    private double dCrc_;
    /**
     * <pre>
     * radius correction(m) 
     * </pre>
     *
     * <code>optional double dCrc = 21;</code>
     */
    public double getDCrc() {
      return dCrc_;
    }

    public static final int DWE_FIELD_NUMBER = 22;
    private double dwe_;
    /**
     * <pre>
     * argument of perigee(radians) lower case omega 
     * </pre>
     *
     * <code>optional double dwe = 22;</code>
     */
    public double getDwe() {
      return dwe_;
    }

    public static final int DDOTOMEGA_FIELD_NUMBER = 23;
    private double dDotOmega_;
    /**
     * <pre>
     * time derivative of longitude of the ascending node(radians/sec) 
     * </pre>
     *
     * <code>optional double dDotOmega = 23;</code>
     */
    public double getDDotOmega() {
      return dDotOmega_;
    }

    public static final int DIDOT_FIELD_NUMBER = 24;
    private double dIDOT_;
    /**
     * <pre>
     * Orbit5 
     * </pre>
     *
     * <code>optional double dIDOT = 24;</code>
     */
    public double getDIDOT() {
      return dIDOT_;
    }

    public static final int DCODESONL2CHANNEL_FIELD_NUMBER = 25;
    private double dCodesOnL2Channel_;
    /**
     * <pre>
     * flags whose meaning is not clear 
     * </pre>
     *
     * <code>optional double dCodesOnL2Channel = 25;</code>
     */
    public double getDCodesOnL2Channel() {
      return dCodesOnL2Channel_;
    }

    public static final int DGPSWEEK_FIELD_NUMBER = 26;
    private double dGpsWeek_;
    /**
     * <pre>
     * GPS week number 
     * </pre>
     *
     * <code>optional double dGpsWeek = 26;</code>
     */
    public double getDGpsWeek() {
      return dGpsWeek_;
    }

    public static final int DL2PDATAFLAG_FIELD_NUMBER = 27;
    private double dL2PDataFlag_;
    /**
     * <pre>
     * Flags whose meaning is not clear 
     * </pre>
     *
     * <code>optional double dL2PDataFlag = 27;</code>
     */
    public double getDL2PDataFlag() {
      return dL2PDataFlag_;
    }

    public static final int DSVACC_FIELD_NUMBER = 28;
    private double dSVAcc_;
    /**
     * <pre>
     * Orbit6 
     * </pre>
     *
     * <code>optional double dSVAcc = 28;</code>
     */
    public double getDSVAcc() {
      return dSVAcc_;
    }

    public static final int DSVHEALTH_FIELD_NUMBER = 29;
    private double dSVHealth_;
    /**
     * <pre>
     * satellite health flag 
     * </pre>
     *
     * <code>optional double dSVHealth = 29;</code>
     */
    public double getDSVHealth() {
      return dSVHealth_;
    }

    public static final int DTGD_FIELD_NUMBER = 30;
    private double dTGD_;
    /**
     * <pre>
     * Group delay L2 bias (word 7 subframe 1) 
     * </pre>
     *
     * <code>optional double dTGD = 30;</code>
     */
    public double getDTGD() {
      return dTGD_;
    }

    public static final int DIODC_FIELD_NUMBER = 31;
    private double dIODC_;
    /**
     * <pre>
     * age of clock parameter upload (sec) 
     * </pre>
     *
     * <code>optional double dIODC = 31;</code>
     */
    public double getDIODC() {
      return dIODC_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getStrSatSysBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, strSatSys_);
      }
      if (iGpsPrn_ != 0) {
        output.writeInt32(2, iGpsPrn_);
      }
      if (stToc_ != null) {
        output.writeMessage(3, getStToc());
      }
      if (stTocGpsT_ != null) {
        output.writeMessage(4, getStTocGpsT());
      }
      if (dClkBias_ != 0D) {
        output.writeDouble(5, dClkBias_);
      }
      if (dClkDrift_ != 0D) {
        output.writeDouble(6, dClkDrift_);
      }
      if (dClkRate_ != 0D) {
        output.writeDouble(7, dClkRate_);
      }
      if (dIODE_ != 0D) {
        output.writeDouble(8, dIODE_);
      }
      if (dCrs_ != 0D) {
        output.writeDouble(9, dCrs_);
      }
      if (dDeltaN_ != 0D) {
        output.writeDouble(10, dDeltaN_);
      }
      if (dM0_ != 0D) {
        output.writeDouble(11, dM0_);
      }
      if (dCuc_ != 0D) {
        output.writeDouble(12, dCuc_);
      }
      if (de_ != 0D) {
        output.writeDouble(13, de_);
      }
      if (dCus_ != 0D) {
        output.writeDouble(14, dCus_);
      }
      if (dSqrtA_ != 0D) {
        output.writeDouble(15, dSqrtA_);
      }
      if (dToe_ != 0D) {
        output.writeDouble(16, dToe_);
      }
      if (dCic_ != 0D) {
        output.writeDouble(17, dCic_);
      }
      if (dOmega_ != 0D) {
        output.writeDouble(18, dOmega_);
      }
      if (dCis_ != 0D) {
        output.writeDouble(19, dCis_);
      }
      if (di0_ != 0D) {
        output.writeDouble(20, di0_);
      }
      if (dCrc_ != 0D) {
        output.writeDouble(21, dCrc_);
      }
      if (dwe_ != 0D) {
        output.writeDouble(22, dwe_);
      }
      if (dDotOmega_ != 0D) {
        output.writeDouble(23, dDotOmega_);
      }
      if (dIDOT_ != 0D) {
        output.writeDouble(24, dIDOT_);
      }
      if (dCodesOnL2Channel_ != 0D) {
        output.writeDouble(25, dCodesOnL2Channel_);
      }
      if (dGpsWeek_ != 0D) {
        output.writeDouble(26, dGpsWeek_);
      }
      if (dL2PDataFlag_ != 0D) {
        output.writeDouble(27, dL2PDataFlag_);
      }
      if (dSVAcc_ != 0D) {
        output.writeDouble(28, dSVAcc_);
      }
      if (dSVHealth_ != 0D) {
        output.writeDouble(29, dSVHealth_);
      }
      if (dTGD_ != 0D) {
        output.writeDouble(30, dTGD_);
      }
      if (dIODC_ != 0D) {
        output.writeDouble(31, dIODC_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getStrSatSysBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, strSatSys_);
      }
      if (iGpsPrn_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, iGpsPrn_);
      }
      if (stToc_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getStToc());
      }
      if (stTocGpsT_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getStTocGpsT());
      }
      if (dClkBias_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, dClkBias_);
      }
      if (dClkDrift_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, dClkDrift_);
      }
      if (dClkRate_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, dClkRate_);
      }
      if (dIODE_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, dIODE_);
      }
      if (dCrs_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(9, dCrs_);
      }
      if (dDeltaN_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(10, dDeltaN_);
      }
      if (dM0_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(11, dM0_);
      }
      if (dCuc_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(12, dCuc_);
      }
      if (de_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(13, de_);
      }
      if (dCus_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(14, dCus_);
      }
      if (dSqrtA_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(15, dSqrtA_);
      }
      if (dToe_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(16, dToe_);
      }
      if (dCic_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(17, dCic_);
      }
      if (dOmega_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(18, dOmega_);
      }
      if (dCis_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(19, dCis_);
      }
      if (di0_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(20, di0_);
      }
      if (dCrc_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(21, dCrc_);
      }
      if (dwe_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(22, dwe_);
      }
      if (dDotOmega_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(23, dDotOmega_);
      }
      if (dIDOT_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(24, dIDOT_);
      }
      if (dCodesOnL2Channel_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(25, dCodesOnL2Channel_);
      }
      if (dGpsWeek_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(26, dGpsWeek_);
      }
      if (dL2PDataFlag_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(27, dL2PDataFlag_);
      }
      if (dSVAcc_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(28, dSVAcc_);
      }
      if (dSVHealth_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(29, dSVHealth_);
      }
      if (dTGD_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(30, dTGD_);
      }
      if (dIODC_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(31, dIODC_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.chinalbs.pb.MotEph.StGpsBrdEph)) {
        return super.equals(obj);
      }
      org.chinalbs.pb.MotEph.StGpsBrdEph other = (org.chinalbs.pb.MotEph.StGpsBrdEph) obj;

      boolean result = true;
      result = result && getStrSatSys()
          .equals(other.getStrSatSys());
      result = result && (getIGpsPrn()
          == other.getIGpsPrn());
      result = result && (hasStToc() == other.hasStToc());
      if (hasStToc()) {
        result = result && getStToc()
            .equals(other.getStToc());
      }
      result = result && (hasStTocGpsT() == other.hasStTocGpsT());
      if (hasStTocGpsT()) {
        result = result && getStTocGpsT()
            .equals(other.getStTocGpsT());
      }
      result = result && (
          Double.doubleToLongBits(getDClkBias())
          == Double.doubleToLongBits(
              other.getDClkBias()));
      result = result && (
          Double.doubleToLongBits(getDClkDrift())
          == Double.doubleToLongBits(
              other.getDClkDrift()));
      result = result && (
          Double.doubleToLongBits(getDClkRate())
          == Double.doubleToLongBits(
              other.getDClkRate()));
      result = result && (
          Double.doubleToLongBits(getDIODE())
          == Double.doubleToLongBits(
              other.getDIODE()));
      result = result && (
          Double.doubleToLongBits(getDCrs())
          == Double.doubleToLongBits(
              other.getDCrs()));
      result = result && (
          Double.doubleToLongBits(getDDeltaN())
          == Double.doubleToLongBits(
              other.getDDeltaN()));
      result = result && (
          Double.doubleToLongBits(getDM0())
          == Double.doubleToLongBits(
              other.getDM0()));
      result = result && (
          Double.doubleToLongBits(getDCuc())
          == Double.doubleToLongBits(
              other.getDCuc()));
      result = result && (
          Double.doubleToLongBits(getDe())
          == Double.doubleToLongBits(
              other.getDe()));
      result = result && (
          Double.doubleToLongBits(getDCus())
          == Double.doubleToLongBits(
              other.getDCus()));
      result = result && (
          Double.doubleToLongBits(getDSqrtA())
          == Double.doubleToLongBits(
              other.getDSqrtA()));
      result = result && (
          Double.doubleToLongBits(getDToe())
          == Double.doubleToLongBits(
              other.getDToe()));
      result = result && (
          Double.doubleToLongBits(getDCic())
          == Double.doubleToLongBits(
              other.getDCic()));
      result = result && (
          Double.doubleToLongBits(getDOmega())
          == Double.doubleToLongBits(
              other.getDOmega()));
      result = result && (
          Double.doubleToLongBits(getDCis())
          == Double.doubleToLongBits(
              other.getDCis()));
      result = result && (
          Double.doubleToLongBits(getDi0())
          == Double.doubleToLongBits(
              other.getDi0()));
      result = result && (
          Double.doubleToLongBits(getDCrc())
          == Double.doubleToLongBits(
              other.getDCrc()));
      result = result && (
          Double.doubleToLongBits(getDwe())
          == Double.doubleToLongBits(
              other.getDwe()));
      result = result && (
          Double.doubleToLongBits(getDDotOmega())
          == Double.doubleToLongBits(
              other.getDDotOmega()));
      result = result && (
          Double.doubleToLongBits(getDIDOT())
          == Double.doubleToLongBits(
              other.getDIDOT()));
      result = result && (
          Double.doubleToLongBits(getDCodesOnL2Channel())
          == Double.doubleToLongBits(
              other.getDCodesOnL2Channel()));
      result = result && (
          Double.doubleToLongBits(getDGpsWeek())
          == Double.doubleToLongBits(
              other.getDGpsWeek()));
      result = result && (
          Double.doubleToLongBits(getDL2PDataFlag())
          == Double.doubleToLongBits(
              other.getDL2PDataFlag()));
      result = result && (
          Double.doubleToLongBits(getDSVAcc())
          == Double.doubleToLongBits(
              other.getDSVAcc()));
      result = result && (
          Double.doubleToLongBits(getDSVHealth())
          == Double.doubleToLongBits(
              other.getDSVHealth()));
      result = result && (
          Double.doubleToLongBits(getDTGD())
          == Double.doubleToLongBits(
              other.getDTGD()));
      result = result && (
          Double.doubleToLongBits(getDIODC())
          == Double.doubleToLongBits(
              other.getDIODC()));
      return result;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + STRSATSYS_FIELD_NUMBER;
      hash = (53 * hash) + getStrSatSys().hashCode();
      hash = (37 * hash) + IGPSPRN_FIELD_NUMBER;
      hash = (53 * hash) + getIGpsPrn();
      if (hasStToc()) {
        hash = (37 * hash) + STTOC_FIELD_NUMBER;
        hash = (53 * hash) + getStToc().hashCode();
      }
      if (hasStTocGpsT()) {
        hash = (37 * hash) + STTOCGPST_FIELD_NUMBER;
        hash = (53 * hash) + getStTocGpsT().hashCode();
      }
      hash = (37 * hash) + DCLKBIAS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDClkBias()));
      hash = (37 * hash) + DCLKDRIFT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDClkDrift()));
      hash = (37 * hash) + DCLKRATE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDClkRate()));
      hash = (37 * hash) + DIODE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDIODE()));
      hash = (37 * hash) + DCRS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDCrs()));
      hash = (37 * hash) + DDELTAN_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDDeltaN()));
      hash = (37 * hash) + DM0_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDM0()));
      hash = (37 * hash) + DCUC_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDCuc()));
      hash = (37 * hash) + DE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDe()));
      hash = (37 * hash) + DCUS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDCus()));
      hash = (37 * hash) + DSQRTA_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDSqrtA()));
      hash = (37 * hash) + DTOE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDToe()));
      hash = (37 * hash) + DCIC_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDCic()));
      hash = (37 * hash) + DOMEGA_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDOmega()));
      hash = (37 * hash) + DCIS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDCis()));
      hash = (37 * hash) + DI0_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDi0()));
      hash = (37 * hash) + DCRC_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDCrc()));
      hash = (37 * hash) + DWE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDwe()));
      hash = (37 * hash) + DDOTOMEGA_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDDotOmega()));
      hash = (37 * hash) + DIDOT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDIDOT()));
      hash = (37 * hash) + DCODESONL2CHANNEL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDCodesOnL2Channel()));
      hash = (37 * hash) + DGPSWEEK_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDGpsWeek()));
      hash = (37 * hash) + DL2PDATAFLAG_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDL2PDataFlag()));
      hash = (37 * hash) + DSVACC_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDSVAcc()));
      hash = (37 * hash) + DSVHEALTH_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDSVHealth()));
      hash = (37 * hash) + DTGD_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDTGD()));
      hash = (37 * hash) + DIODC_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDIODC()));
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.chinalbs.pb.MotEph.StGpsBrdEph parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.chinalbs.pb.MotEph.StGpsBrdEph parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.chinalbs.pb.MotEph.StGpsBrdEph parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.chinalbs.pb.MotEph.StGpsBrdEph parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.chinalbs.pb.MotEph.StGpsBrdEph parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.chinalbs.pb.MotEph.StGpsBrdEph parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.chinalbs.pb.MotEph.StGpsBrdEph parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.chinalbs.pb.MotEph.StGpsBrdEph parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.chinalbs.pb.MotEph.StGpsBrdEph parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.chinalbs.pb.MotEph.StGpsBrdEph parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chinalbs.pb.MotEph.StGpsBrdEph prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *GPS 广播星历
     * </pre>
     *
     * Protobuf type {@code org.stationharbor.model.StGpsBrdEph}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.stationharbor.model.StGpsBrdEph)
        org.chinalbs.pb.MotEph.StGpsBrdEphOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.chinalbs.pb.MotEph.internal_static_org_stationharbor_model_StGpsBrdEph_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.chinalbs.pb.MotEph.internal_static_org_stationharbor_model_StGpsBrdEph_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.chinalbs.pb.MotEph.StGpsBrdEph.class, org.chinalbs.pb.MotEph.StGpsBrdEph.Builder.class);
      }

      // Construct using org.chinalbs.pb.MotEph.StGpsBrdEph.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        strSatSys_ = "";

        iGpsPrn_ = 0;

        if (stTocBuilder_ == null) {
          stToc_ = null;
        } else {
          stToc_ = null;
          stTocBuilder_ = null;
        }
        if (stTocGpsTBuilder_ == null) {
          stTocGpsT_ = null;
        } else {
          stTocGpsT_ = null;
          stTocGpsTBuilder_ = null;
        }
        dClkBias_ = 0D;

        dClkDrift_ = 0D;

        dClkRate_ = 0D;

        dIODE_ = 0D;

        dCrs_ = 0D;

        dDeltaN_ = 0D;

        dM0_ = 0D;

        dCuc_ = 0D;

        de_ = 0D;

        dCus_ = 0D;

        dSqrtA_ = 0D;

        dToe_ = 0D;

        dCic_ = 0D;

        dOmega_ = 0D;

        dCis_ = 0D;

        di0_ = 0D;

        dCrc_ = 0D;

        dwe_ = 0D;

        dDotOmega_ = 0D;

        dIDOT_ = 0D;

        dCodesOnL2Channel_ = 0D;

        dGpsWeek_ = 0D;

        dL2PDataFlag_ = 0D;

        dSVAcc_ = 0D;

        dSVHealth_ = 0D;

        dTGD_ = 0D;

        dIODC_ = 0D;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.chinalbs.pb.MotEph.internal_static_org_stationharbor_model_StGpsBrdEph_descriptor;
      }

      public org.chinalbs.pb.MotEph.StGpsBrdEph getDefaultInstanceForType() {
        return org.chinalbs.pb.MotEph.StGpsBrdEph.getDefaultInstance();
      }

      public org.chinalbs.pb.MotEph.StGpsBrdEph build() {
        org.chinalbs.pb.MotEph.StGpsBrdEph result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.chinalbs.pb.MotEph.StGpsBrdEph buildPartial() {
        org.chinalbs.pb.MotEph.StGpsBrdEph result = new org.chinalbs.pb.MotEph.StGpsBrdEph(this);
        result.strSatSys_ = strSatSys_;
        result.iGpsPrn_ = iGpsPrn_;
        if (stTocBuilder_ == null) {
          result.stToc_ = stToc_;
        } else {
          result.stToc_ = stTocBuilder_.build();
        }
        if (stTocGpsTBuilder_ == null) {
          result.stTocGpsT_ = stTocGpsT_;
        } else {
          result.stTocGpsT_ = stTocGpsTBuilder_.build();
        }
        result.dClkBias_ = dClkBias_;
        result.dClkDrift_ = dClkDrift_;
        result.dClkRate_ = dClkRate_;
        result.dIODE_ = dIODE_;
        result.dCrs_ = dCrs_;
        result.dDeltaN_ = dDeltaN_;
        result.dM0_ = dM0_;
        result.dCuc_ = dCuc_;
        result.de_ = de_;
        result.dCus_ = dCus_;
        result.dSqrtA_ = dSqrtA_;
        result.dToe_ = dToe_;
        result.dCic_ = dCic_;
        result.dOmega_ = dOmega_;
        result.dCis_ = dCis_;
        result.di0_ = di0_;
        result.dCrc_ = dCrc_;
        result.dwe_ = dwe_;
        result.dDotOmega_ = dDotOmega_;
        result.dIDOT_ = dIDOT_;
        result.dCodesOnL2Channel_ = dCodesOnL2Channel_;
        result.dGpsWeek_ = dGpsWeek_;
        result.dL2PDataFlag_ = dL2PDataFlag_;
        result.dSVAcc_ = dSVAcc_;
        result.dSVHealth_ = dSVHealth_;
        result.dTGD_ = dTGD_;
        result.dIODC_ = dIODC_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.chinalbs.pb.MotEph.StGpsBrdEph) {
          return mergeFrom((org.chinalbs.pb.MotEph.StGpsBrdEph)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.chinalbs.pb.MotEph.StGpsBrdEph other) {
        if (other == org.chinalbs.pb.MotEph.StGpsBrdEph.getDefaultInstance()) return this;
        if (!other.getStrSatSys().isEmpty()) {
          strSatSys_ = other.strSatSys_;
          onChanged();
        }
        if (other.getIGpsPrn() != 0) {
          setIGpsPrn(other.getIGpsPrn());
        }
        if (other.hasStToc()) {
          mergeStToc(other.getStToc());
        }
        if (other.hasStTocGpsT()) {
          mergeStTocGpsT(other.getStTocGpsT());
        }
        if (other.getDClkBias() != 0D) {
          setDClkBias(other.getDClkBias());
        }
        if (other.getDClkDrift() != 0D) {
          setDClkDrift(other.getDClkDrift());
        }
        if (other.getDClkRate() != 0D) {
          setDClkRate(other.getDClkRate());
        }
        if (other.getDIODE() != 0D) {
          setDIODE(other.getDIODE());
        }
        if (other.getDCrs() != 0D) {
          setDCrs(other.getDCrs());
        }
        if (other.getDDeltaN() != 0D) {
          setDDeltaN(other.getDDeltaN());
        }
        if (other.getDM0() != 0D) {
          setDM0(other.getDM0());
        }
        if (other.getDCuc() != 0D) {
          setDCuc(other.getDCuc());
        }
        if (other.getDe() != 0D) {
          setDe(other.getDe());
        }
        if (other.getDCus() != 0D) {
          setDCus(other.getDCus());
        }
        if (other.getDSqrtA() != 0D) {
          setDSqrtA(other.getDSqrtA());
        }
        if (other.getDToe() != 0D) {
          setDToe(other.getDToe());
        }
        if (other.getDCic() != 0D) {
          setDCic(other.getDCic());
        }
        if (other.getDOmega() != 0D) {
          setDOmega(other.getDOmega());
        }
        if (other.getDCis() != 0D) {
          setDCis(other.getDCis());
        }
        if (other.getDi0() != 0D) {
          setDi0(other.getDi0());
        }
        if (other.getDCrc() != 0D) {
          setDCrc(other.getDCrc());
        }
        if (other.getDwe() != 0D) {
          setDwe(other.getDwe());
        }
        if (other.getDDotOmega() != 0D) {
          setDDotOmega(other.getDDotOmega());
        }
        if (other.getDIDOT() != 0D) {
          setDIDOT(other.getDIDOT());
        }
        if (other.getDCodesOnL2Channel() != 0D) {
          setDCodesOnL2Channel(other.getDCodesOnL2Channel());
        }
        if (other.getDGpsWeek() != 0D) {
          setDGpsWeek(other.getDGpsWeek());
        }
        if (other.getDL2PDataFlag() != 0D) {
          setDL2PDataFlag(other.getDL2PDataFlag());
        }
        if (other.getDSVAcc() != 0D) {
          setDSVAcc(other.getDSVAcc());
        }
        if (other.getDSVHealth() != 0D) {
          setDSVHealth(other.getDSVHealth());
        }
        if (other.getDTGD() != 0D) {
          setDTGD(other.getDTGD());
        }
        if (other.getDIODC() != 0D) {
          setDIODC(other.getDIODC());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.chinalbs.pb.MotEph.StGpsBrdEph parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.chinalbs.pb.MotEph.StGpsBrdEph) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private Object strSatSys_ = "";
      /**
       * <code>optional string strSatSys = 1;</code>
       */
      public String getStrSatSys() {
        Object ref = strSatSys_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          strSatSys_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <code>optional string strSatSys = 1;</code>
       */
      public com.google.protobuf.ByteString
          getStrSatSysBytes() {
        Object ref = strSatSys_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          strSatSys_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string strSatSys = 1;</code>
       */
      public Builder setStrSatSys(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        strSatSys_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string strSatSys = 1;</code>
       */
      public Builder clearStrSatSys() {
        
        strSatSys_ = getDefaultInstance().getStrSatSys();
        onChanged();
        return this;
      }
      /**
       * <code>optional string strSatSys = 1;</code>
       */
      public Builder setStrSatSysBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        strSatSys_ = value;
        onChanged();
        return this;
      }

      private int iGpsPrn_ ;
      /**
       * <code>optional int32 iGpsPrn = 2;</code>
       */
      public int getIGpsPrn() {
        return iGpsPrn_;
      }
      /**
       * <code>optional int32 iGpsPrn = 2;</code>
       */
      public Builder setIGpsPrn(int value) {
        
        iGpsPrn_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 iGpsPrn = 2;</code>
       */
      public Builder clearIGpsPrn() {
        
        iGpsPrn_ = 0;
        onChanged();
        return this;
      }

      private org.chinalbs.pb.MotCommon.StCOMT stToc_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.chinalbs.pb.MotCommon.StCOMT, org.chinalbs.pb.MotCommon.StCOMT.Builder, org.chinalbs.pb.MotCommon.StCOMTOrBuilder> stTocBuilder_;
      /**
       * <code>optional .org.stationharbor.model.StCOMT stToc = 3;</code>
       */
      public boolean hasStToc() {
        return stTocBuilder_ != null || stToc_ != null;
      }
      /**
       * <code>optional .org.stationharbor.model.StCOMT stToc = 3;</code>
       */
      public org.chinalbs.pb.MotCommon.StCOMT getStToc() {
        if (stTocBuilder_ == null) {
          return stToc_ == null ? org.chinalbs.pb.MotCommon.StCOMT.getDefaultInstance() : stToc_;
        } else {
          return stTocBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.stationharbor.model.StCOMT stToc = 3;</code>
       */
      public Builder setStToc(org.chinalbs.pb.MotCommon.StCOMT value) {
        if (stTocBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          stToc_ = value;
          onChanged();
        } else {
          stTocBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .org.stationharbor.model.StCOMT stToc = 3;</code>
       */
      public Builder setStToc(
          org.chinalbs.pb.MotCommon.StCOMT.Builder builderForValue) {
        if (stTocBuilder_ == null) {
          stToc_ = builderForValue.build();
          onChanged();
        } else {
          stTocBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .org.stationharbor.model.StCOMT stToc = 3;</code>
       */
      public Builder mergeStToc(org.chinalbs.pb.MotCommon.StCOMT value) {
        if (stTocBuilder_ == null) {
          if (stToc_ != null) {
            stToc_ =
              org.chinalbs.pb.MotCommon.StCOMT.newBuilder(stToc_).mergeFrom(value).buildPartial();
          } else {
            stToc_ = value;
          }
          onChanged();
        } else {
          stTocBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .org.stationharbor.model.StCOMT stToc = 3;</code>
       */
      public Builder clearStToc() {
        if (stTocBuilder_ == null) {
          stToc_ = null;
          onChanged();
        } else {
          stToc_ = null;
          stTocBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .org.stationharbor.model.StCOMT stToc = 3;</code>
       */
      public org.chinalbs.pb.MotCommon.StCOMT.Builder getStTocBuilder() {
        
        onChanged();
        return getStTocFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.stationharbor.model.StCOMT stToc = 3;</code>
       */
      public org.chinalbs.pb.MotCommon.StCOMTOrBuilder getStTocOrBuilder() {
        if (stTocBuilder_ != null) {
          return stTocBuilder_.getMessageOrBuilder();
        } else {
          return stToc_ == null ?
              org.chinalbs.pb.MotCommon.StCOMT.getDefaultInstance() : stToc_;
        }
      }
      /**
       * <code>optional .org.stationharbor.model.StCOMT stToc = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.chinalbs.pb.MotCommon.StCOMT, org.chinalbs.pb.MotCommon.StCOMT.Builder, org.chinalbs.pb.MotCommon.StCOMTOrBuilder> 
          getStTocFieldBuilder() {
        if (stTocBuilder_ == null) {
          stTocBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.chinalbs.pb.MotCommon.StCOMT, org.chinalbs.pb.MotCommon.StCOMT.Builder, org.chinalbs.pb.MotCommon.StCOMTOrBuilder>(
                  getStToc(),
                  getParentForChildren(),
                  isClean());
          stToc_ = null;
        }
        return stTocBuilder_;
      }

      private org.chinalbs.pb.MotCommon.StGPST stTocGpsT_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.chinalbs.pb.MotCommon.StGPST, org.chinalbs.pb.MotCommon.StGPST.Builder, org.chinalbs.pb.MotCommon.StGPSTOrBuilder> stTocGpsTBuilder_;
      /**
       * <code>optional .org.stationharbor.model.StGPST stTocGpsT = 4;</code>
       */
      public boolean hasStTocGpsT() {
        return stTocGpsTBuilder_ != null || stTocGpsT_ != null;
      }
      /**
       * <code>optional .org.stationharbor.model.StGPST stTocGpsT = 4;</code>
       */
      public org.chinalbs.pb.MotCommon.StGPST getStTocGpsT() {
        if (stTocGpsTBuilder_ == null) {
          return stTocGpsT_ == null ? org.chinalbs.pb.MotCommon.StGPST.getDefaultInstance() : stTocGpsT_;
        } else {
          return stTocGpsTBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.stationharbor.model.StGPST stTocGpsT = 4;</code>
       */
      public Builder setStTocGpsT(org.chinalbs.pb.MotCommon.StGPST value) {
        if (stTocGpsTBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          stTocGpsT_ = value;
          onChanged();
        } else {
          stTocGpsTBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .org.stationharbor.model.StGPST stTocGpsT = 4;</code>
       */
      public Builder setStTocGpsT(
          org.chinalbs.pb.MotCommon.StGPST.Builder builderForValue) {
        if (stTocGpsTBuilder_ == null) {
          stTocGpsT_ = builderForValue.build();
          onChanged();
        } else {
          stTocGpsTBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .org.stationharbor.model.StGPST stTocGpsT = 4;</code>
       */
      public Builder mergeStTocGpsT(org.chinalbs.pb.MotCommon.StGPST value) {
        if (stTocGpsTBuilder_ == null) {
          if (stTocGpsT_ != null) {
            stTocGpsT_ =
              org.chinalbs.pb.MotCommon.StGPST.newBuilder(stTocGpsT_).mergeFrom(value).buildPartial();
          } else {
            stTocGpsT_ = value;
          }
          onChanged();
        } else {
          stTocGpsTBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .org.stationharbor.model.StGPST stTocGpsT = 4;</code>
       */
      public Builder clearStTocGpsT() {
        if (stTocGpsTBuilder_ == null) {
          stTocGpsT_ = null;
          onChanged();
        } else {
          stTocGpsT_ = null;
          stTocGpsTBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .org.stationharbor.model.StGPST stTocGpsT = 4;</code>
       */
      public org.chinalbs.pb.MotCommon.StGPST.Builder getStTocGpsTBuilder() {
        
        onChanged();
        return getStTocGpsTFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.stationharbor.model.StGPST stTocGpsT = 4;</code>
       */
      public org.chinalbs.pb.MotCommon.StGPSTOrBuilder getStTocGpsTOrBuilder() {
        if (stTocGpsTBuilder_ != null) {
          return stTocGpsTBuilder_.getMessageOrBuilder();
        } else {
          return stTocGpsT_ == null ?
              org.chinalbs.pb.MotCommon.StGPST.getDefaultInstance() : stTocGpsT_;
        }
      }
      /**
       * <code>optional .org.stationharbor.model.StGPST stTocGpsT = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.chinalbs.pb.MotCommon.StGPST, org.chinalbs.pb.MotCommon.StGPST.Builder, org.chinalbs.pb.MotCommon.StGPSTOrBuilder> 
          getStTocGpsTFieldBuilder() {
        if (stTocGpsTBuilder_ == null) {
          stTocGpsTBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.chinalbs.pb.MotCommon.StGPST, org.chinalbs.pb.MotCommon.StGPST.Builder, org.chinalbs.pb.MotCommon.StGPSTOrBuilder>(
                  getStTocGpsT(),
                  getParentForChildren(),
                  isClean());
          stTocGpsT_ = null;
        }
        return stTocGpsTBuilder_;
      }

      private double dClkBias_ ;
      /**
       * <pre>
       *af0
       * </pre>
       *
       * <code>optional double dClkBias = 5;</code>
       */
      public double getDClkBias() {
        return dClkBias_;
      }
      /**
       * <pre>
       *af0
       * </pre>
       *
       * <code>optional double dClkBias = 5;</code>
       */
      public Builder setDClkBias(double value) {
        
        dClkBias_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *af0
       * </pre>
       *
       * <code>optional double dClkBias = 5;</code>
       */
      public Builder clearDClkBias() {
        
        dClkBias_ = 0D;
        onChanged();
        return this;
      }

      private double dClkDrift_ ;
      /**
       * <pre>
       *af1
       * </pre>
       *
       * <code>optional double dClkDrift = 6;</code>
       */
      public double getDClkDrift() {
        return dClkDrift_;
      }
      /**
       * <pre>
       *af1
       * </pre>
       *
       * <code>optional double dClkDrift = 6;</code>
       */
      public Builder setDClkDrift(double value) {
        
        dClkDrift_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *af1
       * </pre>
       *
       * <code>optional double dClkDrift = 6;</code>
       */
      public Builder clearDClkDrift() {
        
        dClkDrift_ = 0D;
        onChanged();
        return this;
      }

      private double dClkRate_ ;
      /**
       * <pre>
       *af2
       * </pre>
       *
       * <code>optional double dClkRate = 7;</code>
       */
      public double getDClkRate() {
        return dClkRate_;
      }
      /**
       * <pre>
       *af2
       * </pre>
       *
       * <code>optional double dClkRate = 7;</code>
       */
      public Builder setDClkRate(double value) {
        
        dClkRate_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *af2
       * </pre>
       *
       * <code>optional double dClkRate = 7;</code>
       */
      public Builder clearDClkRate() {
        
        dClkRate_ = 0D;
        onChanged();
        return this;
      }

      private double dIODE_ ;
      /**
       * <pre>
       * Orbit1 
       * </pre>
       *
       * <code>optional double dIODE = 8;</code>
       */
      public double getDIODE() {
        return dIODE_;
      }
      /**
       * <pre>
       * Orbit1 
       * </pre>
       *
       * <code>optional double dIODE = 8;</code>
       */
      public Builder setDIODE(double value) {
        
        dIODE_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Orbit1 
       * </pre>
       *
       * <code>optional double dIODE = 8;</code>
       */
      public Builder clearDIODE() {
        
        dIODE_ = 0D;
        onChanged();
        return this;
      }

      private double dCrs_ ;
      /**
       * <pre>
       * radius correction sine(m) 
       * </pre>
       *
       * <code>optional double dCrs = 9;</code>
       */
      public double getDCrs() {
        return dCrs_;
      }
      /**
       * <pre>
       * radius correction sine(m) 
       * </pre>
       *
       * <code>optional double dCrs = 9;</code>
       */
      public Builder setDCrs(double value) {
        
        dCrs_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * radius correction sine(m) 
       * </pre>
       *
       * <code>optional double dCrs = 9;</code>
       */
      public Builder clearDCrs() {
        
        dCrs_ = 0D;
        onChanged();
        return this;
      }

      private double dDeltaN_ ;
      /**
       * <pre>
       * correction to mean motion(radians/sec) 
       * </pre>
       *
       * <code>optional double dDeltaN = 10;</code>
       */
      public double getDDeltaN() {
        return dDeltaN_;
      }
      /**
       * <pre>
       * correction to mean motion(radians/sec) 
       * </pre>
       *
       * <code>optional double dDeltaN = 10;</code>
       */
      public Builder setDDeltaN(double value) {
        
        dDeltaN_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * correction to mean motion(radians/sec) 
       * </pre>
       *
       * <code>optional double dDeltaN = 10;</code>
       */
      public Builder clearDDeltaN() {
        
        dDeltaN_ = 0D;
        onChanged();
        return this;
      }

      private double dM0_ ;
      /**
       * <pre>
       * mean anomaly (radians) 
       * </pre>
       *
       * <code>optional double dM0 = 11;</code>
       */
      public double getDM0() {
        return dM0_;
      }
      /**
       * <pre>
       * mean anomaly (radians) 
       * </pre>
       *
       * <code>optional double dM0 = 11;</code>
       */
      public Builder setDM0(double value) {
        
        dM0_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * mean anomaly (radians) 
       * </pre>
       *
       * <code>optional double dM0 = 11;</code>
       */
      public Builder clearDM0() {
        
        dM0_ = 0D;
        onChanged();
        return this;
      }

      private double dCuc_ ;
      /**
       * <pre>
       * Orbit2 
       * </pre>
       *
       * <code>optional double dCuc = 12;</code>
       */
      public double getDCuc() {
        return dCuc_;
      }
      /**
       * <pre>
       * Orbit2 
       * </pre>
       *
       * <code>optional double dCuc = 12;</code>
       */
      public Builder setDCuc(double value) {
        
        dCuc_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Orbit2 
       * </pre>
       *
       * <code>optional double dCuc = 12;</code>
       */
      public Builder clearDCuc() {
        
        dCuc_ = 0D;
        onChanged();
        return this;
      }

      private double de_ ;
      /**
       * <pre>
       * eccentricity 
       * </pre>
       *
       * <code>optional double de = 13;</code>
       */
      public double getDe() {
        return de_;
      }
      /**
       * <pre>
       * eccentricity 
       * </pre>
       *
       * <code>optional double de = 13;</code>
       */
      public Builder setDe(double value) {
        
        de_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * eccentricity 
       * </pre>
       *
       * <code>optional double de = 13;</code>
       */
      public Builder clearDe() {
        
        de_ = 0D;
        onChanged();
        return this;
      }

      private double dCus_ ;
      /**
       * <pre>
       * correction to argument in latitude sine(radians) 
       * </pre>
       *
       * <code>optional double dCus = 14;</code>
       */
      public double getDCus() {
        return dCus_;
      }
      /**
       * <pre>
       * correction to argument in latitude sine(radians) 
       * </pre>
       *
       * <code>optional double dCus = 14;</code>
       */
      public Builder setDCus(double value) {
        
        dCus_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * correction to argument in latitude sine(radians) 
       * </pre>
       *
       * <code>optional double dCus = 14;</code>
       */
      public Builder clearDCus() {
        
        dCus_ = 0D;
        onChanged();
        return this;
      }

      private double dSqrtA_ ;
      /**
       * <pre>
       * square root if semi-major axis(m^0.5) 
       * </pre>
       *
       * <code>optional double dSqrtA = 15;</code>
       */
      public double getDSqrtA() {
        return dSqrtA_;
      }
      /**
       * <pre>
       * square root if semi-major axis(m^0.5) 
       * </pre>
       *
       * <code>optional double dSqrtA = 15;</code>
       */
      public Builder setDSqrtA(double value) {
        
        dSqrtA_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * square root if semi-major axis(m^0.5) 
       * </pre>
       *
       * <code>optional double dSqrtA = 15;</code>
       */
      public Builder clearDSqrtA() {
        
        dSqrtA_ = 0D;
        onChanged();
        return this;
      }

      private double dToe_ ;
      /**
       * <pre>
       * Orbit3 
       * </pre>
       *
       * <code>optional double dToe = 16;</code>
       */
      public double getDToe() {
        return dToe_;
      }
      /**
       * <pre>
       * Orbit3 
       * </pre>
       *
       * <code>optional double dToe = 16;</code>
       */
      public Builder setDToe(double value) {
        
        dToe_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Orbit3 
       * </pre>
       *
       * <code>optional double dToe = 16;</code>
       */
      public Builder clearDToe() {
        
        dToe_ = 0D;
        onChanged();
        return this;
      }

      private double dCic_ ;
      /**
       * <pre>
       * correction to inclination,cosine(radians) 
       * </pre>
       *
       * <code>optional double dCic = 17;</code>
       */
      public double getDCic() {
        return dCic_;
      }
      /**
       * <pre>
       * correction to inclination,cosine(radians) 
       * </pre>
       *
       * <code>optional double dCic = 17;</code>
       */
      public Builder setDCic(double value) {
        
        dCic_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * correction to inclination,cosine(radians) 
       * </pre>
       *
       * <code>optional double dCic = 17;</code>
       */
      public Builder clearDCic() {
        
        dCic_ = 0D;
        onChanged();
        return this;
      }

      private double dOmega_ ;
      /**
       * <pre>
       * langitude of theasecending node (radians) Capital omega 
       * </pre>
       *
       * <code>optional double dOmega = 18;</code>
       */
      public double getDOmega() {
        return dOmega_;
      }
      /**
       * <pre>
       * langitude of theasecending node (radians) Capital omega 
       * </pre>
       *
       * <code>optional double dOmega = 18;</code>
       */
      public Builder setDOmega(double value) {
        
        dOmega_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * langitude of theasecending node (radians) Capital omega 
       * </pre>
       *
       * <code>optional double dOmega = 18;</code>
       */
      public Builder clearDOmega() {
        
        dOmega_ = 0D;
        onChanged();
        return this;
      }

      private double dCis_ ;
      /**
       * <pre>
       * corrction to inclination,sine(radians) 
       * </pre>
       *
       * <code>optional double dCis = 19;</code>
       */
      public double getDCis() {
        return dCis_;
      }
      /**
       * <pre>
       * corrction to inclination,sine(radians) 
       * </pre>
       *
       * <code>optional double dCis = 19;</code>
       */
      public Builder setDCis(double value) {
        
        dCis_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * corrction to inclination,sine(radians) 
       * </pre>
       *
       * <code>optional double dCis = 19;</code>
       */
      public Builder clearDCis() {
        
        dCis_ = 0D;
        onChanged();
        return this;
      }

      private double di0_ ;
      /**
       * <pre>
       * Orbit4 
       * </pre>
       *
       * <code>optional double di0 = 20;</code>
       */
      public double getDi0() {
        return di0_;
      }
      /**
       * <pre>
       * Orbit4 
       * </pre>
       *
       * <code>optional double di0 = 20;</code>
       */
      public Builder setDi0(double value) {
        
        di0_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Orbit4 
       * </pre>
       *
       * <code>optional double di0 = 20;</code>
       */
      public Builder clearDi0() {
        
        di0_ = 0D;
        onChanged();
        return this;
      }

      private double dCrc_ ;
      /**
       * <pre>
       * radius correction(m) 
       * </pre>
       *
       * <code>optional double dCrc = 21;</code>
       */
      public double getDCrc() {
        return dCrc_;
      }
      /**
       * <pre>
       * radius correction(m) 
       * </pre>
       *
       * <code>optional double dCrc = 21;</code>
       */
      public Builder setDCrc(double value) {
        
        dCrc_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * radius correction(m) 
       * </pre>
       *
       * <code>optional double dCrc = 21;</code>
       */
      public Builder clearDCrc() {
        
        dCrc_ = 0D;
        onChanged();
        return this;
      }

      private double dwe_ ;
      /**
       * <pre>
       * argument of perigee(radians) lower case omega 
       * </pre>
       *
       * <code>optional double dwe = 22;</code>
       */
      public double getDwe() {
        return dwe_;
      }
      /**
       * <pre>
       * argument of perigee(radians) lower case omega 
       * </pre>
       *
       * <code>optional double dwe = 22;</code>
       */
      public Builder setDwe(double value) {
        
        dwe_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * argument of perigee(radians) lower case omega 
       * </pre>
       *
       * <code>optional double dwe = 22;</code>
       */
      public Builder clearDwe() {
        
        dwe_ = 0D;
        onChanged();
        return this;
      }

      private double dDotOmega_ ;
      /**
       * <pre>
       * time derivative of longitude of the ascending node(radians/sec) 
       * </pre>
       *
       * <code>optional double dDotOmega = 23;</code>
       */
      public double getDDotOmega() {
        return dDotOmega_;
      }
      /**
       * <pre>
       * time derivative of longitude of the ascending node(radians/sec) 
       * </pre>
       *
       * <code>optional double dDotOmega = 23;</code>
       */
      public Builder setDDotOmega(double value) {
        
        dDotOmega_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * time derivative of longitude of the ascending node(radians/sec) 
       * </pre>
       *
       * <code>optional double dDotOmega = 23;</code>
       */
      public Builder clearDDotOmega() {
        
        dDotOmega_ = 0D;
        onChanged();
        return this;
      }

      private double dIDOT_ ;
      /**
       * <pre>
       * Orbit5 
       * </pre>
       *
       * <code>optional double dIDOT = 24;</code>
       */
      public double getDIDOT() {
        return dIDOT_;
      }
      /**
       * <pre>
       * Orbit5 
       * </pre>
       *
       * <code>optional double dIDOT = 24;</code>
       */
      public Builder setDIDOT(double value) {
        
        dIDOT_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Orbit5 
       * </pre>
       *
       * <code>optional double dIDOT = 24;</code>
       */
      public Builder clearDIDOT() {
        
        dIDOT_ = 0D;
        onChanged();
        return this;
      }

      private double dCodesOnL2Channel_ ;
      /**
       * <pre>
       * flags whose meaning is not clear 
       * </pre>
       *
       * <code>optional double dCodesOnL2Channel = 25;</code>
       */
      public double getDCodesOnL2Channel() {
        return dCodesOnL2Channel_;
      }
      /**
       * <pre>
       * flags whose meaning is not clear 
       * </pre>
       *
       * <code>optional double dCodesOnL2Channel = 25;</code>
       */
      public Builder setDCodesOnL2Channel(double value) {
        
        dCodesOnL2Channel_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * flags whose meaning is not clear 
       * </pre>
       *
       * <code>optional double dCodesOnL2Channel = 25;</code>
       */
      public Builder clearDCodesOnL2Channel() {
        
        dCodesOnL2Channel_ = 0D;
        onChanged();
        return this;
      }

      private double dGpsWeek_ ;
      /**
       * <pre>
       * GPS week number 
       * </pre>
       *
       * <code>optional double dGpsWeek = 26;</code>
       */
      public double getDGpsWeek() {
        return dGpsWeek_;
      }
      /**
       * <pre>
       * GPS week number 
       * </pre>
       *
       * <code>optional double dGpsWeek = 26;</code>
       */
      public Builder setDGpsWeek(double value) {
        
        dGpsWeek_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * GPS week number 
       * </pre>
       *
       * <code>optional double dGpsWeek = 26;</code>
       */
      public Builder clearDGpsWeek() {
        
        dGpsWeek_ = 0D;
        onChanged();
        return this;
      }

      private double dL2PDataFlag_ ;
      /**
       * <pre>
       * Flags whose meaning is not clear 
       * </pre>
       *
       * <code>optional double dL2PDataFlag = 27;</code>
       */
      public double getDL2PDataFlag() {
        return dL2PDataFlag_;
      }
      /**
       * <pre>
       * Flags whose meaning is not clear 
       * </pre>
       *
       * <code>optional double dL2PDataFlag = 27;</code>
       */
      public Builder setDL2PDataFlag(double value) {
        
        dL2PDataFlag_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Flags whose meaning is not clear 
       * </pre>
       *
       * <code>optional double dL2PDataFlag = 27;</code>
       */
      public Builder clearDL2PDataFlag() {
        
        dL2PDataFlag_ = 0D;
        onChanged();
        return this;
      }

      private double dSVAcc_ ;
      /**
       * <pre>
       * Orbit6 
       * </pre>
       *
       * <code>optional double dSVAcc = 28;</code>
       */
      public double getDSVAcc() {
        return dSVAcc_;
      }
      /**
       * <pre>
       * Orbit6 
       * </pre>
       *
       * <code>optional double dSVAcc = 28;</code>
       */
      public Builder setDSVAcc(double value) {
        
        dSVAcc_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Orbit6 
       * </pre>
       *
       * <code>optional double dSVAcc = 28;</code>
       */
      public Builder clearDSVAcc() {
        
        dSVAcc_ = 0D;
        onChanged();
        return this;
      }

      private double dSVHealth_ ;
      /**
       * <pre>
       * satellite health flag 
       * </pre>
       *
       * <code>optional double dSVHealth = 29;</code>
       */
      public double getDSVHealth() {
        return dSVHealth_;
      }
      /**
       * <pre>
       * satellite health flag 
       * </pre>
       *
       * <code>optional double dSVHealth = 29;</code>
       */
      public Builder setDSVHealth(double value) {
        
        dSVHealth_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * satellite health flag 
       * </pre>
       *
       * <code>optional double dSVHealth = 29;</code>
       */
      public Builder clearDSVHealth() {
        
        dSVHealth_ = 0D;
        onChanged();
        return this;
      }

      private double dTGD_ ;
      /**
       * <pre>
       * Group delay L2 bias (word 7 subframe 1) 
       * </pre>
       *
       * <code>optional double dTGD = 30;</code>
       */
      public double getDTGD() {
        return dTGD_;
      }
      /**
       * <pre>
       * Group delay L2 bias (word 7 subframe 1) 
       * </pre>
       *
       * <code>optional double dTGD = 30;</code>
       */
      public Builder setDTGD(double value) {
        
        dTGD_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Group delay L2 bias (word 7 subframe 1) 
       * </pre>
       *
       * <code>optional double dTGD = 30;</code>
       */
      public Builder clearDTGD() {
        
        dTGD_ = 0D;
        onChanged();
        return this;
      }

      private double dIODC_ ;
      /**
       * <pre>
       * age of clock parameter upload (sec) 
       * </pre>
       *
       * <code>optional double dIODC = 31;</code>
       */
      public double getDIODC() {
        return dIODC_;
      }
      /**
       * <pre>
       * age of clock parameter upload (sec) 
       * </pre>
       *
       * <code>optional double dIODC = 31;</code>
       */
      public Builder setDIODC(double value) {
        
        dIODC_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * age of clock parameter upload (sec) 
       * </pre>
       *
       * <code>optional double dIODC = 31;</code>
       */
      public Builder clearDIODC() {
        
        dIODC_ = 0D;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:org.stationharbor.model.StGpsBrdEph)
    }

    // @@protoc_insertion_point(class_scope:org.stationharbor.model.StGpsBrdEph)
    private static final org.chinalbs.pb.MotEph.StGpsBrdEph DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.chinalbs.pb.MotEph.StGpsBrdEph();
    }

    public static org.chinalbs.pb.MotEph.StGpsBrdEph getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StGpsBrdEph>
        PARSER = new com.google.protobuf.AbstractParser<StGpsBrdEph>() {
      public StGpsBrdEph parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new StGpsBrdEph(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StGpsBrdEph> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<StGpsBrdEph> getParserForType() {
      return PARSER;
    }

    public org.chinalbs.pb.MotEph.StGpsBrdEph getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_stationharbor_model_StGloBrdEph_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_stationharbor_model_StGloBrdEph_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_stationharbor_model_StBdsBrdEph_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_stationharbor_model_StBdsBrdEph_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_stationharbor_model_StGpsBrdEph_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_stationharbor_model_StGpsBrdEph_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\014MotEph.proto\022\027org.stationharbor.model\032" +
      "\017MotCommon.proto\"\225\002\n\013StGloBrdEph\022\021\n\tstrS" +
      "atSys\030\001 \001(\t\022\017\n\007iGloPrn\030\002 \001(\005\022.\n\005stToe\030\003 " +
      "\001(\0132\037.org.stationharbor.model.StCOMT\022\r\n\005" +
      "dTauN\030\004 \001(\001\022\017\n\007dGammaN\030\005 \001(\001\022\r\n\005dAPos\030\006 " +
      "\003(\001\022\r\n\005dAVel\030\007 \003(\001\022\r\n\005dAAcc\030\010 \003(\001\022\017\n\007dHe" +
      "alth\030\t \001(\001\022\020\n\010iFreqNum\030\n \001(\005\022\n\n\002tb\030\013 \001(\005" +
      "\022\014\n\004tk_h\030\014 \001(\005\022\014\n\004tk_m\030\r \001(\005\022\014\n\004tk_s\030\016 \001" +
      "(\005\022\014\n\004dAoo\030\017 \001(\001\"\323\004\n\013StBdsBrdEph\022\021\n\tstrS" +
      "atSys\030\001 \001(\t\022\017\n\007iBdsPrn\030\002 \001(\005\022.\n\005stToc\030\003 ",
      "\001(\0132\037.org.stationharbor.model.StCOMT\0222\n\t" +
      "stTocBdsT\030\004 \001(\0132\037.org.stationharbor.mode" +
      "l.StBDST\022\020\n\010dClkBias\030\005 \001(\001\022\021\n\tdClkDrift\030" +
      "\006 \001(\001\022\020\n\010dClkRate\030\007 \001(\001\022\r\n\005dAODE\030\010 \001(\001\022\014" +
      "\n\004dCrs\030\t \001(\001\022\017\n\007dDeltaN\030\n \001(\001\022\013\n\003dM0\030\013 \001" +
      "(\001\022\014\n\004dCuc\030\014 \001(\001\022\n\n\002de\030\r \001(\001\022\014\n\004dCus\030\016 \001" +
      "(\001\022\016\n\006dSqrtA\030\017 \001(\001\022\014\n\004dToe\030\020 \001(\001\022\014\n\004dCic" +
      "\030\021 \001(\001\022\016\n\006dOmega\030\022 \001(\001\022\014\n\004dCis\030\023 \001(\001\022\013\n\003" +
      "di0\030\024 \001(\001\022\014\n\004dCrc\030\025 \001(\001\022\013\n\003dwe\030\026 \001(\001\022\021\n\t" +
      "dDotOmega\030\027 \001(\001\022\r\n\005dIDOT\030\030 \001(\001\022\031\n\021dCodes",
      "OnL2Channel\030\031 \001(\001\022\020\n\010dBdsWeek\030\032 \001(\001\022\024\n\014d" +
      "L2PDataFlag\030\033 \001(\001\022\016\n\006dSVAcc\030\034 \001(\001\022\016\n\006dSa" +
      "tH1\030\035 \001(\001\022\r\n\005dTGD1\030\036 \001(\001\022\r\n\005dTGD2\030\037 \001(\001\022" +
      "\r\n\005dAODC\030  \001(\001\"\306\004\n\013StGpsBrdEph\022\021\n\tstrSat" +
      "Sys\030\001 \001(\t\022\017\n\007iGpsPrn\030\002 \001(\005\022.\n\005stToc\030\003 \001(" +
      "\0132\037.org.stationharbor.model.StCOMT\0222\n\tst" +
      "TocGpsT\030\004 \001(\0132\037.org.stationharbor.model." +
      "StGPST\022\020\n\010dClkBias\030\005 \001(\001\022\021\n\tdClkDrift\030\006 " +
      "\001(\001\022\020\n\010dClkRate\030\007 \001(\001\022\r\n\005dIODE\030\010 \001(\001\022\014\n\004" +
      "dCrs\030\t \001(\001\022\017\n\007dDeltaN\030\n \001(\001\022\013\n\003dM0\030\013 \001(\001",
      "\022\014\n\004dCuc\030\014 \001(\001\022\n\n\002de\030\r \001(\001\022\014\n\004dCus\030\016 \001(\001" +
      "\022\016\n\006dSqrtA\030\017 \001(\001\022\014\n\004dToe\030\020 \001(\001\022\014\n\004dCic\030\021" +
      " \001(\001\022\016\n\006dOmega\030\022 \001(\001\022\014\n\004dCis\030\023 \001(\001\022\013\n\003di" +
      "0\030\024 \001(\001\022\014\n\004dCrc\030\025 \001(\001\022\013\n\003dwe\030\026 \001(\001\022\021\n\tdD" +
      "otOmega\030\027 \001(\001\022\r\n\005dIDOT\030\030 \001(\001\022\031\n\021dCodesOn" +
      "L2Channel\030\031 \001(\001\022\020\n\010dGpsWeek\030\032 \001(\001\022\024\n\014dL2" +
      "PDataFlag\030\033 \001(\001\022\016\n\006dSVAcc\030\034 \001(\001\022\021\n\tdSVHe" +
      "alth\030\035 \001(\001\022\014\n\004dTGD\030\036 \001(\001\022\r\n\005dIODC\030\037 \001(\001B" +
      "\033\n\021org.chinalbs.pbB\006MotEphb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          org.chinalbs.pb.MotCommon.getDescriptor(),
        }, assigner);
    internal_static_org_stationharbor_model_StGloBrdEph_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_org_stationharbor_model_StGloBrdEph_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_stationharbor_model_StGloBrdEph_descriptor,
        new String[] { "StrSatSys", "IGloPrn", "StToe", "DTauN", "DGammaN", "DAPos", "DAVel", "DAAcc", "DHealth", "IFreqNum", "Tb", "TkH", "TkM", "TkS", "DAoo", });
    internal_static_org_stationharbor_model_StBdsBrdEph_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_org_stationharbor_model_StBdsBrdEph_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_stationharbor_model_StBdsBrdEph_descriptor,
        new String[] { "StrSatSys", "IBdsPrn", "StToc", "StTocBdsT", "DClkBias", "DClkDrift", "DClkRate", "DAODE", "DCrs", "DDeltaN", "DM0", "DCuc", "De", "DCus", "DSqrtA", "DToe", "DCic", "DOmega", "DCis", "Di0", "DCrc", "Dwe", "DDotOmega", "DIDOT", "DCodesOnL2Channel", "DBdsWeek", "DL2PDataFlag", "DSVAcc", "DSatH1", "DTGD1", "DTGD2", "DAODC", });
    internal_static_org_stationharbor_model_StGpsBrdEph_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_org_stationharbor_model_StGpsBrdEph_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_stationharbor_model_StGpsBrdEph_descriptor,
        new String[] { "StrSatSys", "IGpsPrn", "StToc", "StTocGpsT", "DClkBias", "DClkDrift", "DClkRate", "DIODE", "DCrs", "DDeltaN", "DM0", "DCuc", "De", "DCus", "DSqrtA", "DToe", "DCic", "DOmega", "DCis", "Di0", "DCrc", "Dwe", "DDotOmega", "DIDOT", "DCodesOnL2Channel", "DGpsWeek", "DL2PDataFlag", "DSVAcc", "DSVHealth", "DTGD", "DIODC", });
    org.chinalbs.pb.MotCommon.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
